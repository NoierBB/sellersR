import { useState, useEffect } from 'react';
import axios from 'axios';
import './SubscriptionPage.css';

const SubscriptionPage = () => {
  const [user, setUser] = useState(null);
  const [subscription, setSubscription] = useState(null);
  const [loading, setLoading] = useState(true);
  const [processing, setProcessing] = useState(false);
  const [selectedPlan, setSelectedPlan] = useState(null);

  const plans = [
    {
      id: 'PLAN_30_DAYS',
      name: '–°—Ç–∞—Ä—Ç–µ—Ä',
      duration: '30 –¥–Ω–µ–π',
      price: 1490,
      originalPrice: 2990,
      discount: 50,
      features: [
        '–ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂',
        '–û—Ç—á–µ—Ç—ã –ø–æ 5 —Ç–æ–≤–∞—Ä–∞–º',
        '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö',
        'Email –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        '–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel'
      ],
      popular: false,
      color: 'var(--color-secondary-green)',
      gradient: 'var(--gradient-secondary)'
    },
    {
      id: 'PLAN_60_DAYS',
      name: '–ü—Ä–æ—Ñ–∏',
      duration: '60 –¥–Ω–µ–π',
      price: 2390,
      originalPrice: 5980,
      discount: 60,
      features: [
        '–ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂',
        '–û—Ç—á–µ—Ç—ã –ø–æ 50 —Ç–æ–≤–∞—Ä–∞–º',
        '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
        '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        '–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –∏ PDF',
        '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–µ–∫–ª–∞–º—ã',
        '–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤'
      ],
      popular: true,
      color: 'var(--color-primary-purple)',
      gradient: 'var(--gradient-purple)'
    },
    {
      id: 'PLAN_90_DAYS',
      name: '–≠–∫—Å–ø–µ—Ä—Ç',
      duration: '90 –¥–Ω–µ–π',
      price: 2990,
      originalPrice: 8970,
      discount: 67,
      features: [
        '–ü—Ä–µ–º–∏—É–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂',
        '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤',
        '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
        '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä',
        '–í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞',
        '–ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–µ–∫–ª–∞–º—ã',
        '–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
        'API –¥–æ—Å—Ç—É–ø',
        '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã'
      ],
      popular: false,
      color: 'var(--color-primary-pink)',
      gradient: 'var(--gradient-pink)'
    }
  ];

  useEffect(() => {
    fetchSubscriptionInfo();
  }, []);

  const fetchSubscriptionInfo = async () => {
    try {
      setLoading(true);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const userResponse = await axios.get('/api/auth/user-info');
      if (userResponse.data.success) {
        setUser(userResponse.data.user);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
      const subResponse = await axios.get('/api/subscription/info');
      if (subResponse.data.success && subResponse.data.subscription) {
        setSubscription(subResponse.data.subscription);
      }
    } catch (error) {
      console.error('Error fetching subscription info:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSubscribe = async (planId) => {
    try {
      setProcessing(true);
      setSelectedPlan(planId);
      
      const response = await axios.post('/api/subscription/subscribe', {
        planType: planId
      });
      
      if (response.data.success) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        showNotification('–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!', 'success');
        await fetchSubscriptionInfo(); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      } else {
        showNotification(response.data.message || '–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏', 'error');
      }
    } catch (error) {
      console.error('Error subscribing:', error);
      showNotification('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏', 'error');
    } finally {
      setProcessing(false);
      setSelectedPlan(null);
    }
  };

  const handleCancelSubscription = async () => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?')) {
      return;
    }
    
    try {
      setProcessing(true);
      
      const response = await axios.post('/api/subscription/cancel');
      
      if (response.data.success) {
        showNotification('–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', 'success');
        await fetchSubscriptionInfo();
      } else {
        showNotification(response.data.message || '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏', 'error');
      }
    } catch (error) {
      console.error('Error canceling subscription:', error);
      showNotification('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏', 'error');
    } finally {
      setProcessing(false);
    }
  };

  const showNotification = (message, type = 'info') => {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö—É–∫)
    const notification = document.createElement('div');
    notification.textContent = message;
    notification.className = `notification notification-${type}`;
    notification.style.cssText = `
      position: fixed;
      top: 100px;
      right: 20px;
      padding: 12px 20px;
      border-radius: 8px;
      color: white;
      font-weight: 500;
      z-index: 10000;
      animation: slideInRight 0.3s ease-out;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
      backdrop-filter: blur(10px);
      ${type === 'success' ? 'background: linear-gradient(135deg, #48DD00, #52A529);' : 
        type === 'error' ? 'background: linear-gradient(135deg, #FF4757, #FF3838);' : 
        'background: linear-gradient(135deg, #9F3ED5, #AD66D5);'}
    `;
    
    document.body.appendChild(notification);
    setTimeout(() => {
      document.body.removeChild(notification);
    }, 4000);
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  const getDaysRemaining = (endDate) => {
    const now = new Date();
    const end = new Date(endDate);
    const diffTime = end - now;
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return Math.max(0, diffDays);
  };

  if (loading) {
    return (
      <div className="subscription-page">
        <div className="container">
          <div className="loading-screen">
            <div className="loading-spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="subscription-page">
      <div className="container">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="subscription-header">
          <div className="header-content">
            <h1 className="page-title">
              <span className="title-icon">üíé</span>
              –ü–æ–¥–ø–∏—Å–∫–∏ SellLab
            </h1>
            <p className="page-subtitle">
              –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º
            </p>
          </div>
          
          {subscription && subscription.status === 'ACTIVE' && (
            <div className="current-subscription">
              <div className="subscription-badge">
                <span className="badge-icon">‚úÖ</span>
                –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
              </div>
              <div className="subscription-details">
                <div className="subscription-plan">
                  {plans.find(p => p.id === subscription.planType)?.name || subscription.planType}
                </div>
                <div className="subscription-expires">
                  –î–æ {formatDate(subscription.endDate)} ({getDaysRemaining(subscription.endDate)} –¥–Ω–µ–π)
                </div>
              </div>
            </div>
          )}
        </div>

        {/* –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã */}
        <div className="plans-section">
          <div className="plans-grid">
            {plans.map((plan, index) => (
              <div 
                key={plan.id}
                className={`plan-card ${plan.popular ? 'plan-card-popular' : ''} ${
                  subscription?.planType === plan.id && subscription?.status === 'ACTIVE' ? 'plan-card-current' : ''
                }`}
                style={{ '--plan-color': plan.color }}
              >
                {plan.popular && (
                  <div className="plan-badge">
                    <span>üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–π</span>
                  </div>
                )}
                
                {subscription?.planType === plan.id && subscription?.status === 'ACTIVE' && (
                  <div className="plan-current-badge">
                    <span>‚úÖ –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω</span>
                  </div>
                )}

                <div className="plan-header">
                  <div className="plan-icon" style={{ background: plan.gradient }}>
                    {index === 0 ? 'üöÄ' : index === 1 ? '‚ö°' : 'üëë'}
                  </div>
                  <h3 className="plan-name">{plan.name}</h3>
                  <div className="plan-duration">{plan.duration}</div>
                </div>

                <div className="plan-pricing">
                  <div className="plan-price">
                    <span className="price-currency">‚ÇΩ</span>
                    <span className="price-amount">{plan.price.toLocaleString()}</span>
                  </div>
                  
                  {plan.originalPrice > plan.price && (
                    <div className="plan-original-price">
                      <span className="original-price">‚ÇΩ{plan.originalPrice.toLocaleString()}</span>
                      <span className="discount-badge">-{plan.discount}%</span>
                    </div>
                  )}
                  
                  <div className="plan-price-per-day">
                    ‚âà ‚ÇΩ{Math.round(plan.price / parseInt(plan.duration))} –≤ –¥–µ–Ω—å
                  </div>
                </div>

                <div className="plan-features">
                  <h4 className="features-title">–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</h4>
                  <ul className="features-list">
                    {plan.features.map((feature, i) => (
                      <li key={i} className="feature-item">
                        <span className="feature-icon">‚úì</span>
                        <span className="feature-text">{feature}</span>
                      </li>
                    ))}
                  </ul>
                </div>

                <div className="plan-action">
                  {subscription?.planType === plan.id && subscription?.status === 'ACTIVE' ? (
                    <button 
                      className="btn btn-current"
                      disabled
                    >
                      <span>‚úÖ</span>
                      –ê–∫—Ç–∏–≤–µ–Ω
                    </button>
                  ) : (
                    <button
                      className="btn btn-primary"
                      onClick={() => handleSubscribe(plan.id)}
                      disabled={processing}
                      style={{ background: plan.gradient }}
                    >
                      {processing && selectedPlan === plan.id ? (
                        <>
                          <span className="loading-spinner-small"></span>
                          –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ...
                        </>
                      ) : (
                        <>
                          <span>üíé</span>
                          –í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω
                        </>
                      )}
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ */}
        {subscription && subscription.status === 'ACTIVE' && (
          <div className="subscription-info">
            <div className="info-section">
              <h3 className="info-title">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</h3>
              
              <div className="info-grid">
                <div className="info-card">
                  <div className="info-icon">üìÖ</div>
                  <div className="info-content">
                    <h4>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</h4>
                    <p>{formatDate(subscription.startDate)}</p>
                  </div>
                </div>
                
                <div className="info-card">
                  <div className="info-icon">‚è∞</div>
                  <div className="info-content">
                    <h4>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</h4>
                    <p>{formatDate(subscription.endDate)}</p>
                  </div>
                </div>
                
                <div className="info-card">
                  <div className="info-icon">üí∞</div>
                  <div className="info-content">
                    <h4>–°—Ç–æ–∏–º–æ—Å—Ç—å</h4>
                    <p>‚ÇΩ{subscription.price?.toLocaleString() || 'N/A'}</p>
                  </div>
                </div>
                
                <div className="info-card">
                  <div className="info-icon">üîÑ</div>
                  <div className="info-content">
                    <h4>–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ</h4>
                    <p>{subscription.autoRenew ? '–í–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}</p>
                  </div>
                </div>
              </div>
              
              <div className="info-actions">
                <button
                  className="btn btn-danger"
                  onClick={handleCancelSubscription}
                  disabled={processing}
                >
                  {processing ? (
                    <>
                      <span className="loading-spinner-small"></span>
                      –û—Ç–º–µ–Ω–∞...
                    </>
                  ) : (
                    <>
                      <span>‚ùå</span>
                      –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        )}

        {/* FAQ */}
        <div className="faq-section">
          <div className="section-header">
            <h2 className="section-title">–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</h2>
          </div>
          
          <div className="faq-grid">
            <div className="faq-item">
              <h4 className="faq-question">ü§î –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?</h4>
              <p className="faq-answer">
                –î–∞, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç. –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º 
                —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.
              </p>
            </div>
            
            <div className="faq-item">
              <h4 className="faq-question">üí≥ –ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã?</h4>
              <p className="faq-answer">
                –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã, –∞ —Ç–∞–∫–∂–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ 
                –∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã.
              </p>
            </div>
            
            <div className="faq-item">
              <h4 className="faq-question">üîÑ –ï—Å—Ç—å –ª–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ?</h4>
              <p className="faq-answer">
                –î–∞, –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ 
                –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.
              </p>
            </div>
            
            <div className="faq-item">
              <h4 className="faq-question">üìä –°–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –ª–∏ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ?</h4>
              <p className="faq-answer">
                –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏. 
                –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–∏–º –¥–æ—Å—Ç—É–ø –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SubscriptionPage;