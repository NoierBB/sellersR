package org.example.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.concurrent.ConcurrentHashMap;

@Service
public class TelegramBotService extends TelegramLongPollingBot {
    
    @Value("${telegram.bot.token}")
    private String botToken;
    
    @Value("${telegram.bot.username}")
    private String botUsername;
    
    // –í–∫–ª—é—á–∞–µ–º Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    private boolean botEnabled = true;
    
    private final ConcurrentHashMap<String, String> verificationCodes = new ConcurrentHashMap<>();
    private final AuthService authService;
    
    public TelegramBotService(AuthService authService) {
        this.authService = authService;
        System.out.println("üöÄ TelegramBotService –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
    }
    
    @Override
    public void onUpdateReceived(Update update) {
        if (!botEnabled) {
            System.out.println("‚ö†Ô∏è Telegram –±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω");
            return;
        }
        
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            String chatId = update.getMessage().getChatId().toString();
            
            System.out.println("Received message: " + messageText + " from chat: " + chatId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (6 —Ü–∏—Ñ—Ä)
            if (messageText.matches("\\d{6}")) {
                handleVerificationCode(chatId, messageText);
            } else {
                sendWelcomeMessage(chatId);
            }
        }
    }
    
    private void handleVerificationCode(String chatId, String code) {
        if (!botEnabled) return;
        
        System.out.println("Processing verification code: " + code);
        
        try {
            boolean verified = authService.verifyUser(code);
            
            if (verified) {
                sendMessage(chatId, "‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ Wildberries.");
            } else {
                sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–¥ –∏—Å—Ç–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.");
            }
        } catch (Exception e) {
            System.err.println("Error during verification: " + e.getMessage());
            sendMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.");
        }
    }
    
    private void sendWelcomeMessage(String chatId) {
        if (!botEnabled) return;
        
        String welcomeText = """
                üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ Wildberries Analytics!
                
                üîê –≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.
                
                üìù –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:
                1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ
                2. –ü–æ–ª—É—á–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —ç—Ç–æ–º—É –±–æ—Ç—É
                
                ‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ.
                """;
        
        sendMessage(chatId, welcomeText);
    }
    
    public void sendMessage(String chatId, String text) {
        if (!botEnabled) return;
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        
        try {
            execute(message);
            System.out.println("Message sent successfully to chat: " + chatId);
        } catch (TelegramApiException e) {
            System.err.println("Error sending message: " + e.getMessage());
        }
    }
    
    @Override
    public String getBotUsername() {
        return botUsername != null ? botUsername : "SellersWilberis_bot";
    }
    
    @Override
    public String getBotToken() {
        return botToken != null ? botToken : "dummy-token";
    }
} 