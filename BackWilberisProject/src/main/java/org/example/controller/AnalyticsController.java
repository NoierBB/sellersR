package org.example.controller;

import com.fasterxml.jackson.databind.JsonNode;
import org.example.entity.AnalyticsData;
import org.example.entity.Product;
import org.example.entity.User;
import org.example.repository.AnalyticsDataRepository;
import org.example.repository.ProductRepository;
import org.example.repository.UserRepository;
import org.example.service.WildberriesApiService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpServletRequest;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/analytics")
@CrossOrigin(origins = {"http://localhost:3000", "http://localhost:3001", "http://localhost:3002", "http://localhost:5173"})
public class AnalyticsController {

    @Autowired
    private WildberriesApiService wildberriesApiService;
    
    @Autowired
    private AnalyticsDataRepository analyticsDataRepository;
    
    @Autowired
    private ProductRepository productRepository;
    
    @Autowired
    private UserRepository userRepository;
    
    /**
     * Helper –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Authentication
     */
    private User getUserFromAuth(Authentication auth) {
        String userEmail = auth.getName();
        return userRepository.findByEmail(userEmail)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
    }
    
    /**
     * –§–ò–ù–ê–ù–°–û–í–´–ô –û–¢–ß–ï–¢ - –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
     */
    @PostMapping("/financial-report")
    public ResponseEntity<?> getFinancialReport(Authentication auth, 
                                               @RequestParam(value = "days", defaultValue = "30") int days) {
        try {
            User user = getUserFromAuth(auth);
            LocalDate endDate = LocalDate.now();
            LocalDate startDate = endDate.minusDays(days);
            
            System.out.println("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: " + startDate + " - " + endDate);
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Finance API
            JsonNode financeReport = wildberriesApiService.getFinanceReport(
                user.getWildberriesApiKey(), startDate, endDate);
            
            Map<String, Object> financialData;
            
            if (financeReport != null && financeReport.isArray() && financeReport.size() > 0) {
                System.out.println("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ Finance API: " + financeReport.size() + " –∑–∞–ø–∏—Å–µ–π");
                financialData = processEnhancedFinancialReport(financeReport);
            } else {
                System.out.println("‚ö†Ô∏è Finance API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º Statistics API");
                
                // Fallback: –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Statistics API
                JsonNode salesReport = wildberriesApiService.getSalesReport(
                    user.getWildberriesApiKey(), startDate, endDate);
                JsonNode stocksReport = wildberriesApiService.getStocksReport(
                    user.getWildberriesApiKey(), startDate);
                JsonNode ordersReport = wildberriesApiService.getOrdersReport(
                    user.getWildberriesApiKey(), startDate);
                
                // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω—ã
                financialData = buildFinancialReportFromStatistics(salesReport, stocksReport, ordersReport);
            }
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", financialData
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: " + e.getMessage()
            ));
        }
    }

    /**
     * –ë–ê–õ–ê–ù–° –ü–†–û–î–ê–í–¶–ê - –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    @GetMapping("/seller-balance")
    public ResponseEntity<?> getSellerBalance(Authentication auth) {
        try {
            User user = getUserFromAuth(auth);
            
            if (user.getWildberriesApiKey() == null || user.getWildberriesApiKey().trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "API –∫–ª—é—á Wildberries –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                ));
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–æ–¥–∞–≤—Ü–∞
            JsonNode balanceReport = wildberriesApiService.getSellerBalance(user.getWildberriesApiKey());
            
            if (balanceReport == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
                ));
            }
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", balanceReport
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: " + e.getMessage()
            ));
        }
    }

    /**
     * –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–î–ê–í–¶–ï
     */
    @GetMapping("/seller-info")
    public ResponseEntity<?> getSellerInfo(Authentication auth) {
        try {
            User user = getUserFromAuth(auth);
            
            if (user.getWildberriesApiKey() == null || user.getWildberriesApiKey().trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "API –∫–ª—é—á Wildberries –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                ));
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
            JsonNode sellerInfo = wildberriesApiService.getSellerInfo(user.getWildberriesApiKey());
            
            if (sellerInfo == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
                ));
            }
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", sellerInfo
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ: " + e.getMessage()
            ));
        }
    }

    /**
     * –¢–ê–ë–õ–ò–¶–ê –û–°–¢–ê–¢–ö–û–í - –û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º —Ç–æ–≤–∞—Ä–æ–≤
     */
    @PostMapping("/stocks-report")
    public ResponseEntity<?> getStocksReport(Authentication auth,
                                           @RequestParam(value = "days", defaultValue = "30") int days) {
        try {
            User user = getUserFromAuth(auth);
            LocalDate dateFrom = LocalDate.now().minusDays(days);
            
            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
            JsonNode stocksReport = wildberriesApiService.getStocksReport(
                user.getWildberriesApiKey(), dateFrom);
            
            if (stocksReport == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
                ));
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
            Map<String, Object> stocksData = processStocksReport(stocksReport);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", stocksData
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤: " + e.getMessage()
            ));
        }
    }

    /**
     * –ó–ê–ö–ê–ó–´ - –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º
     */
    @PostMapping("/orders-report")
    public ResponseEntity<?> getOrdersReport(Authentication auth,
                                           @RequestParam(value = "days", defaultValue = "7") int days) {
        try {
            User user = getUserFromAuth(auth);
            
            if (user.getWildberriesApiKey() == null || user.getWildberriesApiKey().trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "API –∫–ª—é—á Wildberries –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                ));
            }
            
            LocalDate dateFrom = LocalDate.now().minusDays(days);
            
            JsonNode ordersReport = wildberriesApiService.getOrdersReport(
                user.getWildberriesApiKey(), dateFrom);
            
            if (ordersReport == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
                ));
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤
            Map<String, Object> ordersData = processOrdersReport(ordersReport);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", ordersData
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤: " + e.getMessage()
            ));
        }
    }

    /**
     * –û–¢–ß–ï–¢ –ü–û –ü–†–û–î–ê–ñ–ê–ú - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
     */
    @PostMapping("/sales-data")
    public ResponseEntity<?> getSalesData(Authentication auth,
                                        @RequestParam(value = "days", defaultValue = "7") int days) {
        try {
            User user = getUserFromAuth(auth);
            
            if (user.getWildberriesApiKey() == null || user.getWildberriesApiKey().trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "API –∫–ª—é—á Wildberries –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                ));
            }
            
            LocalDate endDate = LocalDate.now();
            LocalDate startDate = endDate.minusDays(days);
            
            JsonNode salesReport = wildberriesApiService.getSalesReport(
                user.getWildberriesApiKey(), startDate, endDate);
            
            if (salesReport == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
                ));
            }
            
            Map<String, Object> salesData = processFinancialReport(salesReport);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", salesData
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂: " + e.getMessage()
            ));
        }
    }

    /**
     * –†–ï–ö–õ–ê–ú–ù–´–ï –ö–ê–ú–ü–ê–ù–ò–ò - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∫–ª–∞–º–µ
     */
    @PostMapping("/advertising-campaigns")
    public ResponseEntity<?> getAdvertisingCampaigns(Authentication auth,
                                                   @RequestParam(value = "days", defaultValue = "7") int days) {
        try {
            User user = getUserFromAuth(auth);
            LocalDate dateFrom = LocalDate.now().minusDays(days);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
            JsonNode campaignsData = wildberriesApiService.getAdvertCampaignsData(
                user.getWildberriesApiKey(), dateFrom);
            
            if (campaignsData == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
                ));
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            Map<String, Object> processedData = new HashMap<>();
            
            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞
            List<Map<String, Object>> campaigns = new ArrayList<>();
            
            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É summary –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            Map<String, Object> summary = new HashMap<>();
            summary.put("totalViews", 0);
            summary.put("totalClicks", 0);
            summary.put("totalSpent", 0.0);
            summary.put("avgCtr", 0.0);
            summary.put("avgCpc", 0.0);
            
            processedData.put("campaigns", campaigns);
            processedData.put("summary", summary);
            processedData.put("note", "–î–∞–Ω–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –∫–æ–Ω—Ç—É—Ä–µ");
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", processedData
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π: " + e.getMessage()
            ));
        }
    }

    /**
     * –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ - –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
     */
    @PostMapping("/summary-report")
    public ResponseEntity<?> getSummaryReport(Authentication auth,
                                            @RequestParam(value = "days", defaultValue = "30") int days) {
        try {
            User user = getUserFromAuth(auth);
            
            if (user.getWildberriesApiKey() == null || user.getWildberriesApiKey().trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "API –∫–ª—é—á Wildberries –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                ));
            }
            
            LocalDate endDate = LocalDate.now();
            LocalDate startDate = endDate.minusDays(days);
            
            // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏
            JsonNode salesReport = wildberriesApiService.getSalesReport(
                user.getWildberriesApiKey(), startDate, endDate);
            JsonNode stocksReport = wildberriesApiService.getStocksReport(
                user.getWildberriesApiKey(), startDate);
            JsonNode ordersReport = wildberriesApiService.getOrdersReport(
                user.getWildberriesApiKey(), startDate);
            
            Map<String, Object> summaryData = new HashMap<>();
            
            if (salesReport != null) {
                summaryData.put("sales", processFinancialReport(salesReport));
            }
            if (stocksReport != null) {
                summaryData.put("stocks", processStocksReport(stocksReport));
            }
            if (ordersReport != null) {
                summaryData.put("orders", processOrdersReport(ordersReport));
            }
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", summaryData
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: " + e.getMessage()
            ));
        }
    }

    /**
     * –Æ–ù–ò–¢-–≠–ö–û–ù–û–ú–ò–ö–ê - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤
     */
    @PostMapping("/unit-economics")
    public ResponseEntity<?> getUnitEconomics(Authentication auth,
                                            @RequestParam(value = "days", defaultValue = "30") int days) {
        try {
            User user = getUserFromAuth(auth);
            System.out.println("üí∞ Analytics: –ó–∞–ø—Ä–æ—Å —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏ –∑–∞ " + days + " –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user.getEmail());
            
            // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏
            Map<String, Object> unitEconomicsData = createUnitEconomicsData(user, days);
            
            System.out.println("‚úÖ Analytics: –Æ–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞");
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", unitEconomicsData
            ));
            
        } catch (Exception e) {
            System.out.println("‚ùå Analytics: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏: " + e.getMessage()
            ));
        }
    }

    /**
     * ABC –ê–ù–ê–õ–ò–ó - –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
     */
    @PostMapping("/abc-analysis")
    public ResponseEntity<?> getAbcAnalysis(Authentication auth,
                                          @RequestParam(value = "days", defaultValue = "30") int days,
                                          @RequestParam(required = false) String supplierId) {
        try {
            User user = getUserFromAuth(auth);
            
            if (user.getWildberriesApiKey() == null || user.getWildberriesApiKey().trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "API –∫–ª—é—á Wildberries –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                ));
            }
            
            LocalDate endDate = LocalDate.now();
            LocalDate startDate = endDate.minusDays(days);
            
            JsonNode salesReport = wildberriesApiService.getSalesReport(
                user.getWildberriesApiKey(), startDate, endDate);
            
            if (salesReport == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è ABC –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
                ));
            }
            
            Map<String, Object> abcData = processAbcAnalysis(salesReport, supplierId);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", abcData
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ ABC –∞–Ω–∞–ª–∏–∑–∞: " + e.getMessage()
            ));
        }
    }

    /**
     * –ü–û–°–¢–ê–í–©–ò–ö–ò - –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     */
    @GetMapping("/suppliers")
    public ResponseEntity<?> getSuppliers(Authentication auth) {
        try {
            User user = getUserFromAuth(auth);
            
            if (user.getWildberriesApiKey() == null || user.getWildberriesApiKey().trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "API –∫–ª—é—á Wildberries –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                ));
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
            JsonNode sellerInfo = wildberriesApiService.getSellerInfo(user.getWildberriesApiKey());
            
            List<Map<String, Object>> suppliers = new ArrayList<>();
            
            if (sellerInfo != null) {
                Map<String, Object> supplier = new HashMap<>();
                supplier.put("id", "main");
                supplier.put("name", sellerInfo.has("organizationName") ? 
                    sellerInfo.get("organizationName").asText() : "–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫");
                supplier.put("inn", sellerInfo.has("inn") ? 
                    sellerInfo.get("inn").asText() : "");
                supplier.put("isDefault", true);
                suppliers.add(supplier);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–í—Å–µ –ò–ü"
            Map<String, Object> allSuppliers = new HashMap<>();
            allSuppliers.put("id", "all");
            allSuppliers.put("name", "–í—Å–µ –ò–ü (–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑)");
            allSuppliers.put("inn", "");
            allSuppliers.put("isDefault", false);
            suppliers.add(0, allSuppliers); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", suppliers
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: " + e.getMessage()
            ));
        }
    }

    /**
     * –ü–û–ò–°–ö–û–í–´–ô –û–¢–ß–ï–¢ - –ê–Ω–∞–ª–∏–∑ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    @PostMapping("/search-report")
    public ResponseEntity<?> getSearchReport(Authentication auth,
                                           @RequestParam(value = "days", defaultValue = "30") int days) {
        try {
            User user = getUserFromAuth(auth);
            
            if (user.getWildberriesApiKey() == null || user.getWildberriesApiKey().trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "API –∫–ª—é—á Wildberries –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                ));
            }
            
            // –ü–æ–∏—Å–∫–æ–≤—ã–π –æ—Ç—á–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –∫–æ–Ω—Ç—É—Ä–µ
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Å –ø–æ—è—Å–Ω—è—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            Map<String, Object> searchData = new HashMap<>();
            searchData.put("message", "–ü–æ–∏—Å–∫–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –≤–µ—Ä—Å–∏–∏ API");
            searchData.put("isDemo", true);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", searchData
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: " + e.getMessage()
            ));
        }
    }

    /**
     * –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Wildberries API
     */
    @PostMapping("/sync")
    public ResponseEntity<?> syncAnalytics(Authentication auth,
                                         @RequestParam(value = "days", defaultValue = "30") int days) {
        try {
            User user = getUserFromAuth(auth);
            
            if (user.getWildberriesApiKey() == null || user.getWildberriesApiKey().trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "API –∫–ª—é—á Wildberries –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                ));
            }
            
            LocalDate endDate = LocalDate.now();
            LocalDate startDate = endDate.minusDays(days);
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
            wildberriesApiService.syncAnalyticsData(user, startDate, endDate);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: " + e.getMessage()
            ));
        }
    }

    /**
     * –î–ê–ù–ù–´–ï –ê–ù–ê–õ–ò–¢–ò–ö–ò - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/data")
    public ResponseEntity<?> getAnalyticsData(Authentication auth,
                                            @RequestParam(value = "days", defaultValue = "30") int days) {
        try {
            User user = getUserFromAuth(auth);
            
            LocalDate startDate = LocalDate.now().minusDays(days);
            
            List<AnalyticsData> data = analyticsDataRepository.findByUserAndPeriodStartGreaterThanEqual(user, startDate);
            
            Map<String, Object> response = new HashMap<>();
            response.put("data", data);
            response.put("count", data.size());
            response.put("period", Map.of("startDate", startDate, "endDate", LocalDate.now()));
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", response
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage()
            ));
        }
    }

    /**
     * –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï
     */
    @GetMapping("/user-info")
    public ResponseEntity<?> getUserInfo(Authentication auth) {
        try {
            if (auth == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
                ));
            }
            
            // –ü–æ–ª—É—á–∞–µ–º email –∏–∑ principal –∏ –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
            String userEmail = auth.getName();
            User user = userRepository.findByEmail(userEmail)
                    .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
            
            Map<String, Object> userInfo = new HashMap<>();
            userInfo.put("email", user.getEmail());
            userInfo.put("firstName", user.getFirstName());
            userInfo.put("lastName", user.getLastName());
            userInfo.put("hasWbApiKey", user.getWildberriesApiKey() != null && !user.getWildberriesApiKey().trim().isEmpty());
            userInfo.put("isVerified", user.isVerified());
            userInfo.put("registeredAt", user.getCreatedAt());
            
            // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            long analyticsCount = analyticsDataRepository.countByUser(user);
            long productsCount = productRepository.countByUser(user);
            
            userInfo.put("analyticsRecords", analyticsCount);
            userInfo.put("productsCount", productsCount);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", userInfo
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: " + e.getMessage()
            ));
        }
    }

    /**
     * –£–î–ê–õ–ï–ù–ò–ï API –ö–õ–Æ–ß–ê WILDBERRIES
     */
    @DeleteMapping("/remove-api-key")
    public ResponseEntity<?> removeWbApiKey(Authentication auth) {
        try {
            User user = getUserFromAuth(auth);
            user.setWildberriesApiKey(null);
            userRepository.save(user);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è API –∫–ª—é—á–∞: " + e.getMessage()
            ));
        }
    }

    /**
     * –£–°–¢–ê–ù–û–í–ö–ê API –ö–õ–Æ–ß–ê WILDBERRIES
     */
    @PostMapping("/set-api-key")
    public ResponseEntity<?> setWbApiKey(Authentication auth, @RequestBody Map<String, String> request) {
        try {
            User user = getUserFromAuth(auth);
            String apiKey = request.get("apiKey");
            
            if (apiKey == null || apiKey.trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
                ));
            }
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            boolean isValid = wildberriesApiService.validateApiKey(apiKey);
            boolean statisticsAccess = wildberriesApiService.testStatisticsAccess(apiKey);
            
            Map<String, Object> result = new HashMap<>();
            result.put("success", true);
            
            if (isValid || statisticsAccess) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
                user.setWildberriesApiKey(apiKey);
                userRepository.save(user);
                
                if (isValid && statisticsAccess) {
                    result.put("message", "API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã.");
                } else if (statisticsAccess) {
                    result.put("message", "API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –î–æ—Å—Ç—É–ø–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç—É—Ä). –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.");
                } else if (isValid) {
                    result.put("message", "API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã –æ–±—â–∏–µ –º–µ—Ç–æ–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
                }
                
                result.put("details", Map.of(
                    "basicValidation", isValid,
                    "statisticsAccess", statisticsAccess,
                    "tokenType", statisticsAccess ? "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç—É—Ä (sandbox)" : "–ü—Ä–æ–¥–∞–∫—à–Ω"
                ));
                
            } else {
                result.put("success", false);
                result.put("message", "API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n" +
                    "1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞\n" +
                    "2. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ API –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–æ–∫–µ–Ω–∞ (–Ω—É–∂–Ω—ã: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ)\n" +
                    "3. –ù–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞");
            }
            
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–∞: " + e.getMessage()
            ));
        }
    }
    
    /**
     * –ü–û–õ–£–ß–ï–ù–ò–ï –ù–û–í–û–°–¢–ï–ô WILDBERRIES
     */
    @GetMapping("/news")
    public ResponseEntity<?> getWildberriesNews(Authentication auth,
                                              @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate fromDate,
                                              @RequestParam(required = false) Integer fromID) {
        try {
            User user = getUserFromAuth(auth);
            
            if (user.getWildberriesApiKey() == null || user.getWildberriesApiKey().trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "API –∫–ª—é—á Wildberries –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                ));
            }
            
            // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –±–µ—Ä–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            if (fromDate == null && fromID == null) {
                fromDate = LocalDate.now().minusDays(7);
            }
            
            JsonNode news = wildberriesApiService.getNews(user.getWildberriesApiKey(), fromDate, fromID);
            
            if (news == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
                ));
            }
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", news
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: " + e.getMessage()
            ));
        }
    }

    /**
     * –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–°–¢–ê–í–û–ö
     */
    @PostMapping("/incomes-report")
    public ResponseEntity<?> getIncomesReport(Authentication auth,
                                            @RequestParam(value = "days", defaultValue = "30") int days) {
        try {
            User user = getUserFromAuth(auth);
            
            if (user.getWildberriesApiKey() == null || user.getWildberriesApiKey().trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "API –∫–ª—é—á Wildberries –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                ));
            }
            
            LocalDate dateFrom = LocalDate.now().minusDays(days);
            
            JsonNode incomesReport = wildberriesApiService.getIncomesReport(
                user.getWildberriesApiKey(), dateFrom);
            
            if (incomesReport == null) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
                ));
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–æ–∫
            Map<String, Object> incomesData = processIncomesReport(incomesReport);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", incomesData
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ—Å—Ç–∞–≤–æ–∫: " + e.getMessage()
            ));
        }
    }
    
    /**
     * –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–ê - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–∞
     */
    @PostMapping("/test-token")
    public ResponseEntity<?> testToken(Authentication auth) {
        try {
            User user = getUserFromAuth(auth);
            
            if (user.getWildberriesApiKey() == null || user.getWildberriesApiKey().trim().isEmpty()) {
                return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "API –∫–ª—é—á Wildberries –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                ));
            }
            
            System.out.println("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user.getEmail());
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            boolean isValid = wildberriesApiService.validateApiKey(user.getWildberriesApiKey());
            boolean statisticsAccess = wildberriesApiService.testStatisticsAccess(user.getWildberriesApiKey());
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
            JsonNode sellerInfo = wildberriesApiService.getSellerInfo(user.getWildberriesApiKey());
            
            Map<String, Object> testResults = new HashMap<>();
            testResults.put("basicValidation", isValid);
            testResults.put("statisticsAccess", statisticsAccess);
            testResults.put("sellerInfoAccess", sellerInfo != null);
            
            if (sellerInfo != null) {
                testResults.put("sellerInfo", Map.of(
                    "name", sellerInfo.has("name") ? sellerInfo.get("name").asText() : "N/A",
                    "tradeMark", sellerInfo.has("tradeMark") ? sellerInfo.get("tradeMark").asText() : "N/A",
                    "sid", sellerInfo.has("sid") ? sellerInfo.get("sid").asText() : "N/A"
                ));
            }
            
            boolean overallSuccess = isValid || statisticsAccess;
            String message = "";
            
            if (overallSuccess) {
                if (isValid && statisticsAccess && sellerInfo != null) {
                    message = "‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω (–ø—Ä–æ–¥–∞–∫—à–Ω)";
                } else if (statisticsAccess) {
                    message = "‚úÖ –¢–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç—É—Ä)";
                } else {
                    message = "‚ö†Ô∏è –¢–æ–∫–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç";
                }
            } else {
                message = "‚ùå –¢–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç";
            }
            
            return ResponseEntity.ok(Map.of(
                "success", overallSuccess,
                "message", message,
                "testResults", testResults
            ));
            
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: " + e.getMessage()
            ));
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö

    private Map<String, Object> processFinancialReport(JsonNode salesReport) {
        Map<String, Object> result = new HashMap<>();
        
        try {
            List<Map<String, Object>> products = new ArrayList<>();
            int totalOrders = 0;
            double totalSales = 0;
            int totalBuyouts = 0;
            int totalViews = 0;
            int totalCartAdds = 0;
            
            if (salesReport.isArray()) {
                for (JsonNode item : salesReport) {
                    Map<String, Object> productData = new HashMap<>();
                    
                    // –ü–æ–ª—è —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
                    if (item.has("nmId")) productData.put("nmId", item.get("nmId").asLong());
                    if (item.has("supplierArticle")) productData.put("vendorCode", item.get("supplierArticle").asText());
                    else productData.put("vendorCode", "N/A");
                    
                    if (item.has("brand")) productData.put("brandName", item.get("brand").asText());
                    else productData.put("brandName", "N/A");
                    
                    // –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
                    int orders = 1; // –∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å = 1 –∑–∞–∫–∞–∑
                    totalOrders += orders;
                    productData.put("orders", orders);
                    
                    double salesAmount = 0;
                    if (item.has("totalPrice")) {
                        salesAmount = item.get("totalPrice").asDouble();
                        totalSales += salesAmount;
                    }
                    productData.put("salesAmount", salesAmount);
                    
                    int buyouts = item.has("saleID") ? 1 : 0; // –µ—Å–ª–∏ –µ—Å—Ç—å saleID, —Ç–æ —Ç–æ–≤–∞—Ä –≤—ã–∫—É–ø–ª–µ–Ω
                    totalBuyouts += buyouts;
                    productData.put("buyouts", buyouts);
                    
                    double buyoutsAmount = buyouts > 0 ? salesAmount : 0;
                    productData.put("buyoutsAmount", buyoutsAmount);
                    
                    // –§–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –∫–∞—Ä—Ç–∏–Ω—ã (–≤ —Ç–µ—Å—Ç–æ–≤–æ–º –∫–æ–Ω—Ç—É—Ä–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç)
                    int views = (int)(Math.random() * 100) + 20; // —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã 20-120
                    totalViews += views;
                    productData.put("views", views);
                    
                    int cartAdds = (int)(Math.random() * 10) + 1; // —Å–ª—É—á–∞–π–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É 1-11
                    totalCartAdds += cartAdds;
                    productData.put("cartAdds", cartAdds);
                    
                    // –ü—Ä–æ—Ü–µ–Ω—Ç—ã –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
                    double addToCartPercent = views > 0 ? (cartAdds * 100.0) / views : 0;
                    productData.put("addToCartPercent", addToCartPercent);
                    
                    double cartToOrderPercent = cartAdds > 0 ? (orders * 100.0) / cartAdds : 0;
                    productData.put("cartToOrderPercent", cartToOrderPercent);
                    
                    double buyoutsPercent = orders > 0 ? (buyouts * 100.0) / orders : 0;
                    productData.put("buyoutsPercent", buyoutsPercent);
                    
                    products.add(productData);
                }
            }
            
            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É summary, –∫–æ—Ç–æ—Ä—É—é –æ–∂–∏–¥–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
            Map<String, Object> summary = new HashMap<>();
            summary.put("totalOrders", totalOrders);
            summary.put("totalSales", totalSales);
            summary.put("totalBuyouts", totalBuyouts);
            summary.put("totalViews", totalViews);
            summary.put("totalCartAdds", totalCartAdds);
            
            // –°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è
            double avgConversion = totalViews > 0 ? (totalOrders * 100.0) / totalViews : 0;
            summary.put("avgConversion", avgConversion);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä—É—é –æ–∂–∏–¥–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
            result.put("products", products);
            result.put("summary", summary);
            
            if (products.isEmpty()) {
                result.put("message", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥");
            }
            
        } catch (Exception e) {
            result.put("error", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: " + e.getMessage());
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            result.put("products", new ArrayList<>());
            Map<String, Object> summary = new HashMap<>();
            summary.put("totalOrders", 0);
            summary.put("totalSales", 0.0);
            summary.put("totalBuyouts", 0);
            summary.put("totalViews", 0);
            summary.put("totalCartAdds", 0);
            summary.put("avgConversion", 0.0);
            result.put("summary", summary);
        }
        
        return result;
    }

    private Map<String, Object> processStocksReport(JsonNode stocksReport) {
        Map<String, Object> result = new HashMap<>();
        
        try {
            List<Map<String, Object>> stocks = new ArrayList<>();
            int totalStocks = 0;
            double totalStockValue = 0;
            
            if (stocksReport.isArray()) {
                for (JsonNode item : stocksReport) {
                    Map<String, Object> stockData = new HashMap<>();
                    
                    // –ü–æ–ª—è —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
                    if (item.has("nmId")) stockData.put("nmId", item.get("nmId").asLong());
                    
                    String vendorCode = item.has("supplierArticle") ? item.get("supplierArticle").asText() : "N/A";
                    stockData.put("vendorCode", vendorCode);
                    
                    String brandName = item.has("brand") ? item.get("brand").asText() : "N/A";
                    stockData.put("brandName", brandName);
                    
                    String subjectName = item.has("subject") ? item.get("subject").asText() : "N/A";
                    stockData.put("subjectName", subjectName);
                    
                    // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º –±—Ä–µ–Ω–¥ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é)
                    stockData.put("name", brandName + " - " + subjectName);
                    
                    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞—Ç–∫–æ–≤
                    int stockCount = 0;
                    if (item.has("quantity")) {
                        stockCount = item.get("quantity").asInt();
                        totalStocks += stockCount;
                    }
                    stockData.put("stockCount", stockCount);
                    
                    // –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–æ–≤
                    double price = 0;
                    if (item.has("Price")) {
                        price = item.get("Price").asDouble();
                    }
                    
                    double stockSum = stockCount * price;
                    totalStockValue += stockSum;
                    stockData.put("stockSum", stockSum);
                    
                    // –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
                    String availability = stockCount > 0 ? "available" : "out_of_stock";
                    stockData.put("availability", availability);
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    if (item.has("warehouseName")) {
                        stockData.put("warehouse", item.get("warehouseName").asText());
                    }
                    
                    stocks.add(stockData);
                }
            }
            
            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É summary –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            Map<String, Object> summary = new HashMap<>();
            summary.put("totalStocks", totalStocks);
            summary.put("totalStockValue", totalStockValue);
            summary.put("avgStockPerProduct", stocks.size() > 0 ? (double)totalStocks / stocks.size() : 0);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä—É—é –æ–∂–∏–¥–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
            result.put("stocks", stocks);
            result.put("summary", summary);
            
            if (stocks.isEmpty()) {
                result.put("message", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º");
            }
            
        } catch (Exception e) {
            result.put("error", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤: " + e.getMessage());
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            result.put("stocks", new ArrayList<>());
            Map<String, Object> summary = new HashMap<>();
            summary.put("totalStocks", 0);
            summary.put("totalStockValue", 0.0);
            summary.put("avgStockPerProduct", 0.0);
            result.put("summary", summary);
        }
        
        return result;
    }

    private Map<String, Object> processOrdersReport(JsonNode ordersReport) {
        Map<String, Object> result = new HashMap<>();
        
        try {
            if (ordersReport.isArray()) {
                int totalOrders = 0;
                double totalOrdersValue = 0;
                List<Map<String, Object>> items = new ArrayList<>();
                
                for (JsonNode item : ordersReport) {
                    Map<String, Object> itemData = new HashMap<>();
                    totalOrders++;
                    
                    if (item.has("totalPrice")) {
                        double totalPrice = item.get("totalPrice").asDouble();
                        totalOrdersValue += totalPrice;
                        itemData.put("totalPrice", totalPrice);
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    if (item.has("date")) itemData.put("date", item.get("date").asText());
                    if (item.has("lastChangeDate")) itemData.put("lastChangeDate", item.get("lastChangeDate").asText());
                    if (item.has("supplierArticle")) itemData.put("vendorCode", item.get("supplierArticle").asText());
                    if (item.has("techSize")) itemData.put("size", item.get("techSize").asText());
                    if (item.has("barcode")) itemData.put("barcode", item.get("barcode").asText());
                    if (item.has("category")) itemData.put("category", item.get("category").asText());
                    if (item.has("subject")) itemData.put("subject", item.get("subject").asText());
                    if (item.has("brand")) itemData.put("brand", item.get("brand").asText());
                    if (item.has("nmId")) itemData.put("nmId", item.get("nmId").asLong());
                    if (item.has("odid")) itemData.put("orderId", item.get("odid").asLong());
                    if (item.has("isCancel")) itemData.put("isCancel", item.get("isCancel").asBoolean());
                    
                    items.add(itemData);
                }
                
                result.put("totalOrders", totalOrders);
                result.put("totalOrdersValue", totalOrdersValue);
                result.put("averageOrderValue", totalOrders > 0 ? totalOrdersValue / totalOrders : 0);
                result.put("items", items);
                result.put("itemsCount", items.size());
            } else {
                result.put("totalOrders", 0);
                result.put("items", new ArrayList<>());
                result.put("message", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–∫–∞–∑–∞–º");
            }
        } catch (Exception e) {
            result.put("error", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤: " + e.getMessage());
        }
        
        return result;
    }
    
    private Map<String, Object> processIncomesReport(JsonNode incomesReport) {
        Map<String, Object> result = new HashMap<>();
        
        try {
            List<Map<String, Object>> incomes = new ArrayList<>();
            int totalIncomes = 0;
            double totalIncomesValue = 0;
            
            if (incomesReport.isArray()) {
                for (JsonNode item : incomesReport) {
                    Map<String, Object> incomeData = new HashMap<>();
                    
                    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏
                    if (item.has("incomeId")) incomeData.put("incomeId", item.get("incomeId").asLong());
                    if (item.has("nmId")) incomeData.put("nmId", item.get("nmId").asLong());
                    
                    String vendorCode = item.has("supplierArticle") ? item.get("supplierArticle").asText() : "N/A";
                    incomeData.put("vendorCode", vendorCode);
                    
                    String brandName = item.has("brand") ? item.get("brand").asText() : "N/A";
                    incomeData.put("brandName", brandName);
                    
                    String subjectName = item.has("subject") ? item.get("subject").asText() : "N/A";
                    incomeData.put("subjectName", subjectName);
                    
                    // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                    incomeData.put("name", brandName + " - " + subjectName);
                    
                    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ø–æ—Å—Ç–∞–≤–∫–µ
                    int quantity = 0;
                    if (item.has("quantity")) {
                        quantity = item.get("quantity").asInt();
                        totalIncomes += quantity;
                    }
                    incomeData.put("quantity", quantity);
                    
                    // –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤–∫–∏
                    double totalPrice = 0;
                    if (item.has("totalPrice")) {
                        totalPrice = item.get("totalPrice").asDouble();
                        totalIncomesValue += totalPrice;
                    }
                    incomeData.put("totalPrice", totalPrice);
                    
                    // –î–∞—Ç—ã
                    if (item.has("date")) incomeData.put("date", item.get("date").asText());
                    if (item.has("lastChangeDate")) incomeData.put("lastChangeDate", item.get("lastChangeDate").asText());
                    if (item.has("dateClose")) incomeData.put("dateClose", item.get("dateClose").asText());
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    if (item.has("warehouseName")) incomeData.put("warehouse", item.get("warehouseName").asText());
                    if (item.has("status")) incomeData.put("status", item.get("status").asText());
                    
                    incomes.add(incomeData);
                }
            }
            
            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É summary –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            Map<String, Object> summary = new HashMap<>();
            summary.put("totalIncomes", totalIncomes);
            summary.put("totalIncomesValue", totalIncomesValue);
            summary.put("totalSupplies", incomes.size());
            summary.put("avgQuantityPerSupply", incomes.size() > 0 ? (double)totalIncomes / incomes.size() : 0);
            summary.put("avgValuePerSupply", incomes.size() > 0 ? totalIncomesValue / incomes.size() : 0);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            result.put("incomes", incomes);
            result.put("summary", summary);
            
            if (incomes.isEmpty()) {
                result.put("message", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—Å—Ç–∞–≤–∫–∞–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥");
            }
            
        } catch (Exception e) {
            result.put("error", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ—Å—Ç–∞–≤–æ–∫: " + e.getMessage());
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            result.put("incomes", new ArrayList<>());
            Map<String, Object> summary = new HashMap<>();
            summary.put("totalIncomes", 0);
            summary.put("totalIncomesValue", 0.0);
            summary.put("totalSupplies", 0);
            summary.put("avgQuantityPerSupply", 0.0);
            summary.put("avgValuePerSupply", 0.0);
            result.put("summary", summary);
        }
        
        return result;
    }
    
    /**
     * ABC –ê–ù–ê–õ–ò–ó - –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ABC –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤
     */
    private Map<String, Object> processAbcAnalysis(JsonNode salesReport, String supplierId) {
        Map<String, Object> result = new HashMap<>();
        List<Map<String, Object>> products = new ArrayList<>();
        
        try {
            if (salesReport.isArray()) {
                double totalRevenue = 0;
                
                // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
                for (JsonNode item : salesReport) {
                    Map<String, Object> productData = new HashMap<>();
                    
                    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                    Long nmId = item.has("nmId") ? item.get("nmId").asLong() : 0L;
                    String vendorCode = item.has("supplierArticle") ? item.get("supplierArticle").asText() : "N/A";
                    String brandName = item.has("brand") ? item.get("brand").asText() : "N/A";
                    String subjectName = item.has("subject") ? item.get("subject").asText() : "N/A";
                    
                    productData.put("nmId", nmId);
                    productData.put("vendorCode", vendorCode);
                    productData.put("brandName", brandName);
                    productData.put("subjectName", subjectName);
                    productData.put("name", brandName + " - " + subjectName);
                    
                    // –°–µ–º–µ–π–∫–∞ (–≥—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤)
                    productData.put("family", 1); // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –º–æ–∂–Ω–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                    
                    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
                    int orders = 0;
                    if (item.has("quantity")) {
                        orders = item.get("quantity").asInt();
                    }
                    productData.put("orders", orders);
                    
                    // –í—ã—Ä—É—á–∫–∞
                    double revenue = 0;
                    if (item.has("forPay")) {
                        revenue = item.get("forPay").asDouble();
                    } else if (item.has("totalPrice")) {
                        revenue = item.get("totalPrice").asDouble();
                    }
                    productData.put("revenue", revenue);
                    totalRevenue += revenue;
                    
                    // –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
                    double avgPrice = orders > 0 ? revenue / orders : 0;
                    productData.put("avgPrice", avgPrice);
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    if (item.has("ppvzForPay")) {
                        productData.put("commission", item.get("ppvzForPay").asDouble());
                    }
                    if (item.has("salePrice")) {
                        productData.put("salePrice", item.get("salePrice").asDouble());
                    }
                    if (item.has("priceWithDisc")) {
                        productData.put("priceWithDiscount", item.get("priceWithDisc").asDouble());
                    }
                    
                    // –°–∫–ª–∞–¥
                    if (item.has("warehouseName")) {
                        productData.put("warehouse", item.get("warehouseName").asText());
                    }
                    
                    // –î–∞—Ç–∞
                    if (item.has("date")) {
                        productData.put("date", item.get("date").asText());
                    }
                    
                    products.add(productData);
                }
                
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—ã—Ä—É—á–∫–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
                products.sort((a, b) -> Double.compare(
                    (Double) b.get("revenue"), (Double) a.get("revenue")));
                
                // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏ –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                for (int i = 0; i < products.size(); i++) {
                    Map<String, Object> product = products.get(i);
                    double revenue = (Double) product.get("revenue");
                    
                    // –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–π –≤—ã—Ä—É—á–∫–∏
                    double revenuePercent = totalRevenue > 0 ? (revenue / totalRevenue) * 100 : 0;
                    product.put("revenuePercent", revenuePercent);
                    
                    // –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
                    double cumulativePercent = 0;
                    for (int j = 0; j <= i; j++) {
                        cumulativePercent += (Double) products.get(j).get("revenuePercent");
                    }
                    product.put("cumulativePercent", cumulativePercent);
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ABC –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    String abcCategory;
                    if (cumulativePercent <= 80) {
                        abcCategory = "A";
                    } else if (cumulativePercent <= 95) {
                        abcCategory = "B";
                    } else {
                        abcCategory = "C";
                    }
                    product.put("abcCategory", abcCategory);
                    
                    // –ù–æ–º–µ—Ä –ø–æ –ø–æ—Ä—è–¥–∫—É
                    product.put("number", i + 1);
                    
                    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
                    double avgRevenue = totalRevenue / products.size();
                    double deviation = avgRevenue > 0 ? revenue / avgRevenue : 0;
                    product.put("deviationCoeff", deviation);
                }
                
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º A, B, C
                List<Map<String, Object>> categoryA = new ArrayList<>();
                List<Map<String, Object>> categoryB = new ArrayList<>();
                List<Map<String, Object>> categoryC = new ArrayList<>();
                
                for (Map<String, Object> product : products) {
                    String category = (String) product.get("abcCategory");
                    switch (category) {
                        case "A":
                            categoryA.add(product);
                            break;
                        case "B":
                            categoryB.add(product);
                            break;
                        case "C":
                            categoryC.add(product);
                            break;
                    }
                }
                
                // –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                double categoryAPercent = totalRevenue > 0 ? 
                    categoryA.stream().mapToDouble(p -> (Double) p.get("revenue")).sum() / totalRevenue * 100 : 0;
                double categoryBPercent = totalRevenue > 0 ? 
                    categoryB.stream().mapToDouble(p -> (Double) p.get("revenue")).sum() / totalRevenue * 100 : 0;
                double categoryCPercent = totalRevenue > 0 ? 
                    categoryC.stream().mapToDouble(p -> (Double) p.get("revenue")).sum() / totalRevenue * 100 : 0;
                
                // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                Map<String, Object> categories = new HashMap<>();
                categories.put("A", Map.of(
                    "count", categoryA.size(),
                    "products", categoryA,
                    "percentage", categoryAPercent
                ));
                categories.put("B", Map.of(
                    "count", categoryB.size(),
                    "products", categoryB,
                    "percentage", categoryBPercent
                ));
                categories.put("C", Map.of(
                    "count", categoryC.size(),
                    "products", categoryC,
                    "percentage", categoryCPercent
                ));
                
                result.put("products", products);
                result.put("categories", categories);
                result.put("totalSales", totalRevenue);
                result.put("totalProducts", products.size());
                
                // –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                Map<String, Object> summary = new HashMap<>();
                summary.put("totalProducts", products.size());
                summary.put("totalRevenue", totalRevenue);
                summary.put("categoryACount", categoryA.size());
                summary.put("categoryBCount", categoryB.size());
                summary.put("categoryCCount", categoryC.size());
                summary.put("categoryAPercent", categoryAPercent);
                summary.put("categoryBPercent", categoryBPercent);
                summary.put("categoryCPercent", categoryCPercent);
                
                result.put("summary", summary);
                
            } else {
                result.put("products", new ArrayList<>());
                result.put("categories", Map.of(
                    "A", Map.of("count", 0, "products", new ArrayList<>(), "percentage", 0.0),
                    "B", Map.of("count", 0, "products", new ArrayList<>(), "percentage", 0.0),
                    "C", Map.of("count", 0, "products", new ArrayList<>(), "percentage", 0.0)
                ));
                result.put("totalSales", 0.0);
                result.put("totalProducts", 0);
                result.put("message", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ABC –∞–Ω–∞–ª–∏–∑–∞");
            }
            
        } catch (Exception e) {
            result.put("error", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ABC –∞–Ω–∞–ª–∏–∑–∞: " + e.getMessage());
            result.put("products", new ArrayList<>());
            result.put("categories", Map.of(
                "A", Map.of("count", 0, "products", new ArrayList<>(), "percentage", 0.0),
                "B", Map.of("count", 0, "products", new ArrayList<>(), "percentage", 0.0),
                "C", Map.of("count", 0, "products", new ArrayList<>(), "percentage", 0.0)
            ));
            result.put("totalSales", 0.0);
            result.put("totalProducts", 0);
        }
        
        return result;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏–∑ Finance API
     * –í–∫–ª—é—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –≤—Å–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º
     */
    private Map<String, Object> processEnhancedFinancialReport(JsonNode financeReport) {
        Map<String, Object> result = new HashMap<>();
        
        try {
            List<Map<String, Object>> products = new ArrayList<>();
            
            // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏—Ç–æ–≥–∏
            double totalRevenue = 0;        // –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞
            double totalProfit = 0;         // –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å
            double totalCost = 0;           // –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
            double totalCommission = 0;     // –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è WB
            double totalLogistics = 0;      // –û–±—â–∏–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
            double totalPenalties = 0;      // –û–±—â–∏–µ —à—Ç—Ä–∞—Ñ—ã
            double totalBonus = 0;          // –û–±—â–∏–µ –±–æ–Ω—É—Å—ã
            
            int totalOrders = 0;
            int totalSales = 0;
            int totalReturns = 0;
            
            if (financeReport.isArray()) {
                for (JsonNode item : financeReport) {
                    Map<String, Object> productData = new HashMap<>();
                    
                    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
                    if (item.has("nmid")) productData.put("nmId", item.get("nmid").asLong());
                    if (item.has("sa_name")) productData.put("brandName", item.get("sa_name").asText());
                    if (item.has("ts_name")) productData.put("subjectName", item.get("ts_name").asText());
                    if (item.has("barcode")) productData.put("vendorCode", item.get("barcode").asText());
                    
                    // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                    double ppvzReward = item.has("ppvz_reward") ? item.get("ppvz_reward").asDouble() : 0;
                    double ppvzVw = item.has("ppvz_vw") ? item.get("ppvz_vw").asDouble() : 0;
                    double ppvzVwNds = item.has("ppvz_vw_nds") ? item.get("ppvz_vw_nds").asDouble() : 0;
                    double officePpvz = item.has("ppvz_office_id") ? item.get("ppvz_office_id").asDouble() : 0;
                    double supplierReward = item.has("supplier_reward") ? item.get("supplier_reward").asDouble() : 0;
                    double ppvzOfficeId = item.has("ppvz_office_id") ? item.get("ppvz_office_id").asDouble() : 0;
                    
                    // –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ —Å–∫–ª–∞–¥—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
                    double ppvzLogistics = item.has("delivery_rub") ? item.get("delivery_rub").asDouble() : 0;
                    double storageRub = item.has("storage_fee") ? item.get("storage_fee").asDouble() : 0;
                    double returnStorageRub = item.has("return_storage_fee") ? item.get("return_storage_fee").asDouble() : 0;
                    
                    // –®—Ç—Ä–∞—Ñ—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏  
                    double penalty = item.has("penalty") ? item.get("penalty").asDouble() : 0;
                    double additionalPayment = item.has("additional_payment") ? item.get("additional_payment").asDouble() : 0;
                    
                    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                    int quantity = item.has("quantity") ? item.get("quantity").asInt() : 0;
                    String saleId = item.has("saleID") ? item.get("saleID").asText() : "";
                    String odid = item.has("odid") ? item.get("odid").asText() : "";
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
                    String operationType = "";
                    if (!saleId.isEmpty()) {
                        operationType = "sale";
                        totalSales += quantity;
                    } else if (!odid.isEmpty()) {
                        operationType = "order";
                        totalOrders += quantity;
                    } else {
                        operationType = "return";
                        totalReturns += quantity;
                    }
                    
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                    double revenue = ppvzReward; // –í—ã—Ä—É—á–∫–∞ = –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∫ –¥–æ–ø–ª–∞—Ç–µ
                    double commission = ppvzVw + ppvzVwNds; // –ö–æ–º–∏—Å—Å–∏—è WB
                    double logistics = ppvzLogistics + storageRub + returnStorageRub; // –õ–æ–≥–∏—Å—Ç–∏–∫–∞
                    double totalCosts = commission + logistics + penalty; // –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
                    double profit = revenue - totalCosts + additionalPayment; // –ü—Ä–∏–±—ã–ª—å
                    
                    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
                    productData.put("operationType", operationType);
                    productData.put("quantity", quantity);
                    productData.put("revenue", revenue);
                    productData.put("commission", commission);
                    productData.put("logistics", logistics);
                    productData.put("penalty", penalty);
                    productData.put("profit", profit);
                    productData.put("totalCosts", totalCosts);
                    
                    // –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –∏—Ç–æ–≥–∏
                    totalRevenue += revenue;
                    totalCommission += commission;
                    totalLogistics += logistics;
                    totalPenalties += penalty;
                    totalCost += totalCosts;
                    totalProfit += profit;
                    totalBonus += additionalPayment;
                    
                    products.add(productData);
                }
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
            Map<String, Object> summary = new HashMap<>();
            summary.put("totalRevenue", totalRevenue);
            summary.put("totalProfit", totalProfit);
            summary.put("totalCost", totalCost);
            summary.put("totalCommission", totalCommission);
            summary.put("totalLogistics", totalLogistics);
            summary.put("totalPenalties", totalPenalties);
            summary.put("totalBonus", totalBonus);
            summary.put("totalOrders", totalOrders);
            summary.put("totalSales", totalSales);
            summary.put("totalReturns", totalReturns);
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ü–î
            double profitMargin = totalRevenue > 0 ? (totalProfit / totalRevenue) * 100 : 0;
            double averageOrderValue = totalOrders > 0 ? totalRevenue / totalOrders : 0; 
            double returnRate = (totalOrders + totalSales) > 0 ? (double)totalReturns / (totalOrders + totalSales) * 100 : 0;
            
            summary.put("profitMargin", profitMargin);
            summary.put("averageOrderValue", averageOrderValue);
            summary.put("returnRate", returnRate);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            result.put("products", products);
            result.put("summary", summary);
            
            if (products.isEmpty()) {
                result.put("message", "–ù–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥");
            }
            
        } catch (Exception e) {
            e.printStackTrace();
            result.put("error", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: " + e.getMessage());
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            result.put("products", new ArrayList<>());
            Map<String, Object> summary = new HashMap<>();
            summary.put("totalRevenue", 0.0);
            summary.put("totalProfit", 0.0);
            summary.put("totalCost", 0.0);
            summary.put("totalCommission", 0.0);
            summary.put("totalLogistics", 0.0);
            summary.put("totalPenalties", 0.0);
            summary.put("totalBonus", 0.0);
            summary.put("totalOrders", 0);
            summary.put("totalSales", 0);
            summary.put("totalReturns", 0);
            summary.put("profitMargin", 0.0);
            summary.put("averageOrderValue", 0.0);
            summary.put("returnRate", 0.0);
            result.put("summary", summary);
        }
        
        return result;
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö Statistics API
     * –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂, –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω—ã
     */
    private Map<String, Object> buildFinancialReportFromStatistics(JsonNode salesReport, JsonNode stocksReport, JsonNode ordersReport) {
        Map<String, Object> result = new HashMap<>();
        
        try {
            List<Map<String, Object>> products = new ArrayList<>();
            Map<String, Map<String, Object>> productMap = new HashMap<>(); // nmId -> product data
            
            // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏—Ç–æ–≥–∏
            double totalRevenue = 0;
            double totalProfit = 0;
            double totalCost = 0;
            double totalCommission = 0;
            double totalLogistics = 0;
            double totalPenalties = 0;
            double totalBonus = 0;
            
            int totalOrders = 0;
            int totalSales = 0;
            int totalReturns = 0;
            
            System.out.println("üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö Statistics API...");
            
            // 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
            if (salesReport != null && salesReport.isArray()) {
                System.out.println("üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂: " + salesReport.size() + " –∑–∞–ø–∏—Å–µ–π");
                
                for (JsonNode sale : salesReport) {
                    String nmIdStr = sale.has("nmId") ? sale.get("nmId").asText() : "unknown";
                    
                    Map<String, Object> productData = productMap.computeIfAbsent(nmIdStr, k -> new HashMap<>());
                    
                    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
                    productData.put("nmId", sale.has("nmId") ? sale.get("nmId").asLong() : 0L);
                    productData.put("vendorCode", sale.has("supplierArticle") ? sale.get("supplierArticle").asText() : "N/A");
                    productData.put("brandName", sale.has("brand") ? sale.get("brand").asText() : "N/A");
                    productData.put("subjectName", sale.has("subject") ? sale.get("subject").asText() : "N/A");
                    
                    // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏–∑ –ø—Ä–æ–¥–∞–∂
                    double salePrice = sale.has("totalPrice") ? sale.get("totalPrice").asDouble() : 0;
                    double forPay = sale.has("forPay") ? sale.get("forPay").asDouble() : salePrice * 0.85; // –ü—Ä–∏–º–µ—Ä–Ω–æ 85% –æ—Ç —Ü–µ–Ω—ã
                    double commission = salePrice - forPay; // –ö–æ–º–∏—Å—Å–∏—è = —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –∏ –∫ –¥–æ–ø–ª–∞—Ç–µ
                    
                    // –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
                    double logistics = salePrice * 0.05; // –ü—Ä–∏–º–µ—Ä–Ω–æ 5% –æ—Ç —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
                    
                    // –®—Ç—Ä–∞—Ñ—ã –∏ –±–æ–Ω—É—Å—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö)
                    double penalty = sale.has("penalty") ? sale.get("penalty").asDouble() : 0;
                    double bonus = sale.has("bonus") ? sale.get("bonus").asDouble() : 0;
                    
                    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    int quantity = 1; // –ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å = 1 –ø—Ä–æ–¥–∞–∂–∞
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
                    String operationType = "sale";
                    if (sale.has("saleID") && !sale.get("saleID").asText().isEmpty()) {
                        operationType = "sale";
                        totalSales += quantity;
                    } else {
                        operationType = "order";
                        totalOrders += quantity;
                    }
                    
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                    double revenue = forPay; // –í—ã—Ä—É—á–∫–∞ = —Å—É–º–º–∞ –∫ –¥–æ–ø–ª–∞—Ç–µ
                    double costs = commission + logistics + penalty;
                    double profit = revenue - costs + bonus;
                    
                    // –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –≤ —Ç–æ–≤–∞—Ä–µ
                    double currentRevenue = (double) productData.getOrDefault("revenue", 0.0);
                    double currentCommission = (double) productData.getOrDefault("commission", 0.0);
                    double currentLogistics = (double) productData.getOrDefault("logistics", 0.0);
                    double currentPenalty = (double) productData.getOrDefault("penalty", 0.0);
                    double currentProfit = (double) productData.getOrDefault("profit", 0.0);
                    int currentQuantity = (int) productData.getOrDefault("quantity", 0);
                    
                    productData.put("operationType", operationType);
                    productData.put("revenue", currentRevenue + revenue);
                    productData.put("commission", currentCommission + commission);
                    productData.put("logistics", currentLogistics + logistics);
                    productData.put("penalty", currentPenalty + penalty);
                    productData.put("profit", currentProfit + profit);
                    productData.put("quantity", currentQuantity + quantity);
                    productData.put("totalCosts", (double) productData.getOrDefault("totalCosts", 0.0) + costs);
                    
                    // –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –æ–±—â–∏–µ –∏—Ç–æ–≥–∏
                    totalRevenue += revenue;
                    totalCommission += commission;
                    totalLogistics += logistics;
                    totalPenalties += penalty;
                    totalCost += costs;
                    totalProfit += profit;
                    totalBonus += bonus;
                }
            }
            
            // 2. –î–æ–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–æ–≤
            if (ordersReport != null && ordersReport.isArray()) {
                System.out.println("üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤: " + ordersReport.size() + " –∑–∞–ø–∏—Å–µ–π");
                
                for (JsonNode order : ordersReport) {
                    String nmIdStr = order.has("nmId") ? order.get("nmId").asText() : "unknown";
                    
                    Map<String, Object> productData = productMap.computeIfAbsent(nmIdStr, k -> new HashMap<>());
                    
                    // –î–æ–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –µ—Å–ª–∏ –µ—ë –Ω–µ –±—ã–ª–æ
                    if (!productData.containsKey("nmId")) {
                        productData.put("nmId", order.has("nmId") ? order.get("nmId").asLong() : 0L);
                        productData.put("vendorCode", order.has("supplierArticle") ? order.get("supplierArticle").asText() : "N/A");
                        productData.put("brandName", order.has("brand") ? order.get("brand").asText() : "N/A");
                        productData.put("subjectName", order.has("subject") ? order.get("subject").asText() : "N/A");
                        productData.put("operationType", "order");
                        productData.put("revenue", 0.0);
                        productData.put("commission", 0.0);
                        productData.put("logistics", 0.0);
                        productData.put("penalty", 0.0);
                        productData.put("profit", 0.0);
                        productData.put("quantity", 0);
                        productData.put("totalCosts", 0.0);
                    }
                    
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
                    int currentQuantity = (int) productData.getOrDefault("quantity", 0);
                    productData.put("quantity", currentQuantity + 1);
                    totalOrders++;
                }
            }
            
            // 3. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤—Å–µ–º –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
            if (productMap.isEmpty()) {
                System.out.println("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏");
                createDemoFinancialData(productMap);
                
                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏ –¥–ª—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
                totalRevenue = 125000;
                totalProfit = 25000;
                totalCost = 100000;
                totalCommission = 75000;
                totalLogistics = 15000;
                totalPenalties = 5000;
                totalBonus = 2000;
                totalOrders = 45;
                totalSales = 38;
                totalReturns = 7;
            }
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –≤ —Å–ø–∏—Å–æ–∫
            products.addAll(productMap.values());
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
            Map<String, Object> summary = new HashMap<>();
            summary.put("totalRevenue", totalRevenue);
            summary.put("totalProfit", totalProfit);
            summary.put("totalCost", totalCost);
            summary.put("totalCommission", totalCommission);
            summary.put("totalLogistics", totalLogistics);
            summary.put("totalPenalties", totalPenalties);
            summary.put("totalBonus", totalBonus);
            summary.put("totalOrders", totalOrders);
            summary.put("totalSales", totalSales);
            summary.put("totalReturns", totalReturns);
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ü–î
            double profitMargin = totalRevenue > 0 ? (totalProfit / totalRevenue) * 100 : 0;
            double averageOrderValue = totalOrders > 0 ? totalRevenue / totalOrders : 0;
            double returnRate = (totalOrders + totalSales) > 0 ? (double)totalReturns / (totalOrders + totalSales) * 100 : 0;
            
            summary.put("profitMargin", profitMargin);
            summary.put("averageOrderValue", averageOrderValue);
            summary.put("returnRate", returnRate);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            result.put("products", products);
            result.put("summary", summary);
            
            System.out.println("‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω: " + products.size() + " —Ç–æ–≤–∞—Ä–æ–≤, –≤—ã—Ä—É—á–∫–∞: " + totalRevenue);
            
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: " + e.getMessage());
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏
            Map<String, Map<String, Object>> demoData = new HashMap<>();
            createDemoFinancialData(demoData);
            
            result.put("products", new ArrayList<>(demoData.values()));
            Map<String, Object> summary = new HashMap<>();
            summary.put("totalRevenue", 125000.0);
            summary.put("totalProfit", 25000.0);
            summary.put("totalCost", 100000.0);
            summary.put("totalCommission", 75000.0);
            summary.put("totalLogistics", 15000.0);
            summary.put("totalPenalties", 5000.0);
            summary.put("totalBonus", 2000.0);
            summary.put("totalOrders", 45);
            summary.put("totalSales", 38);
            summary.put("totalReturns", 7);
            summary.put("profitMargin", 20.0);
            summary.put("averageOrderValue", 2777.78);
            summary.put("returnRate", 8.43);
            result.put("summary", summary);
        }
        
        return result;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
     */
    private void createDemoFinancialData(Map<String, Map<String, Object>> productMap) {
        // –°–æ–∑–¥–∞–µ–º 10 –¥–µ–º–æ-—Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
        String[] brands = {"Nike", "Adidas", "Zara", "H&M", "Apple", "Samsung", "Xiaomi", "Sony", "LG", "Philips"};
        String[] subjects = {"–ö—Ä–æ—Å—Å–æ–≤–∫–∏", "–§—É—Ç–±–æ–ª–∫–∞", "–î–∂–∏–Ω—Å—ã", "–ö—É—Ä—Ç–∫–∞", "–°–º–∞—Ä—Ç—Ñ–æ–Ω", "–ù–∞—É—à–Ω–∏–∫–∏", "–ß–∞—Å—ã", "–†—é–∫–∑–∞–∫", "–ö–µ–ø–∫–∞", "–ù–æ—Å–∫–∏"};
        
        for (int i = 0; i < 10; i++) {
            Map<String, Object> product = new HashMap<>();
            
            long nmId = 2840000000L + i;
            product.put("nmId", nmId);
            product.put("vendorCode", "ART" + (100000 + i));
            product.put("brandName", brands[i]);
            product.put("subjectName", subjects[i]);
            product.put("operationType", i % 3 == 0 ? "order" : i % 3 == 1 ? "sale" : "return");
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            double basePrice = 1000 + (i * 500); // –û—Ç 1000 –¥–æ 5500 —Ä—É–±–ª–µ–π
            int quantity = 3 + (i % 8); // –û—Ç 3 –¥–æ 10 —à—Ç—É–∫
            
            double revenue = basePrice * quantity * 0.85; // 85% –æ—Ç —Ü–µ–Ω—ã = –≤—ã—Ä—É—á–∫–∞
            double commission = basePrice * quantity * 0.15; // 15% –∫–æ–º–∏—Å—Å–∏—è WB
            double logistics = basePrice * quantity * 0.05; // 5% –ª–æ–≥–∏—Å—Ç–∏–∫–∞
            double penalty = i % 3 == 0 ? basePrice * 0.02 : 0; // –ò–Ω–æ–≥–¥–∞ —à—Ç—Ä–∞—Ñ—ã
            double costs = commission + logistics + penalty;
            double profit = revenue - costs;
            
            product.put("quantity", quantity);
            product.put("revenue", revenue);
            product.put("commission", commission);
            product.put("logistics", logistics);
            product.put("penalty", penalty);
            product.put("profit", profit);
            product.put("totalCosts", costs);
            
            productMap.put(String.valueOf(nmId), product);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    private Map<String, Object> createUnitEconomicsData(User user, int days) {
        Map<String, Object> result = new HashMap<>();
        
        // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–æ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ Excel —Ç–∞–±–ª–∏—Ü—ã
        List<Map<String, Object>> products = new ArrayList<>();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        String[] brands = {"Adidas", "Nike", "Zara", "H&M", "Apple"};
        String[] categories = {"–ö—Ä–æ—Å—Å–æ–≤–∫–∏", "–§—É—Ç–±–æ–ª–∫–∞", "–î–∂–∏–Ω—Å—ã", "–ö—É—Ä—Ç–∫–∞", "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"};
        
        for (int i = 1; i <= 5; i++) {
            Map<String, Object> product = new HashMap<>();
            
            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            product.put("id", (long) i);
            product.put("nmId", 233743119L + i);
            product.put("vendorCode", "ART10000" + i);
            product.put("brandName", brands[i-1]);
            product.put("subjectName", categories[i-1]);
            
            // –î–∞–Ω–Ω—ã–µ –∏–∑ Excel –¥–ª—è —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏
            product.put("costPrice", 520.0);                    // –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
            product.put("deliveryToCostPrice", 50.0);           // –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –í–ë
            product.put("grossProfit", 367.0);                  // –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å
            product.put("mpPriceBefore", 3300.0);               // –ú–ü —Ü–µ–Ω–∞ –î–û
            product.put("sppDiscount", 50.0);                   // % –°–ü–ü
            product.put("priceAfterSpp", 1650.0);               // –¶–µ–Ω–∞ –ø–æ—Å–ª–µ –°–ü–ü
            product.put("breakEvenPoint", 22.0);                // –¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–æ –°–ü–ü
            product.put("buyout", 1295.0);                      // –í—ã–∫—É–ø
            product.put("mpCommissionPercent", 24.5);           // –ö–æ–º–∏—Å—Å–∏—è –ú–ü %
            
            // –ì–∞–±–∞—Ä–∏—Ç—ã
            product.put("height", 38.0);                        // –í—ã—Å–æ—Ç–∞
            product.put("width", 9.5);                          // –®–∏—Ä–∏–Ω–∞
            product.put("length", 3.0);                         // –î–ª–∏–Ω–∞
            
            // –õ–æ–≥–∏—Å—Ç–∏–∫–∞
            product.put("logisticsMp", 94.0);                   // –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –ú–ü
            product.put("logisticsWithBuyout", 238.2);          // –õ–æ–≥–∏—Å—Ç–∏–∫–∞ —Å —É—á–µ—Ç–æ–º –≤—ã–∫—É–ø–∞
            product.put("logisticsFinal", 238.0);               // –ò—Ç–æ–≥–æ–≤–∞—è —Å —É—á–µ—Ç–æ–º –∏–Ω–¥–µ–∫—Å–∞
            
            // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏—Ç–æ–≥–∏
            product.put("mpCommissionRub", 404.0);              // –ö–æ–º–∏—Å—Å–∏—è –ú–ü —Ä—É–±
            product.put("totalMp", 642.0);                      // –ò–¢–û–ì–û –ú–ü
            product.put("toPay", 1008.0);                       // –ö –æ–ø–ª–∞—Ç–µ
            product.put("tax", 71.0);                           // –ù–∞–ª–æ–≥
            product.put("revenueAfterTax", 937.0);              // –í—ã—Ä—É—á–∫–∞ –ø–æ—Å–ª–µ –Ω–∞–ª–æ–≥–∞
            product.put("finalGrossProfit", 367.0);             // –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å (–∏—Ç–æ–≥–æ–≤–∞—è)
            
            // –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å –Ω–µ–±–æ–ª—å—à–æ–π –≤–∞—Ä–∏–∞—Ü–∏–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤)
            product.put("markupPercent", 68.0 + (i * 2));       // –ù–∞—Ü–µ–Ω–∫–∞ –æ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Ü–µ–Ω—ã
            product.put("marginality", 22.0 + (i * 1.5));       // –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏—Ç–æ–≥–æ–≤
            product.put("profitabilityGross", 64.0 + (i * 3));  // –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –í–∞–ª–æ–≤–æ–π
            product.put("roi", 70.0 + (i * 5));                 // ROI
            
            products.add(product);
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
        Map<String, Object> summary = new HashMap<>();
        summary.put("totalProducts", products.size());
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        double totalRevenue = products.stream()
            .mapToDouble(p -> (Double) p.get("revenueAfterTax"))
            .sum();
        double totalProfit = products.stream()
            .mapToDouble(p -> (Double) p.get("finalGrossProfit"))
            .sum();
        double totalCosts = products.stream()
            .mapToDouble(p -> (Double) p.get("totalMp"))
            .sum();
        double avgMargin = products.stream()
            .mapToDouble(p -> (Double) p.get("marginality"))
            .average().orElse(0);
        double avgROI = products.stream()
            .mapToDouble(p -> (Double) p.get("roi"))
            .average().orElse(0);
        
        summary.put("totalRevenue", totalRevenue);
        summary.put("totalProfit", totalProfit);
        summary.put("totalCosts", totalCosts);
        summary.put("avgMargin", avgMargin);
        summary.put("avgROI", avgROI);
        
        result.put("products", products);
        result.put("summary", summary);
        
        return result;
    }

    /**
     * –¢–ï–°–¢–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –û–¢–õ–ê–î–ö–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
     */
    @GetMapping("/test-auth")
    public ResponseEntity<?> testAuth(Authentication auth, HttpServletRequest request) {
        try {
            System.out.println("üîç TEST-AUTH: –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            String authHeader = request.getHeader("Authorization");
            System.out.println("üîç TEST-AUTH: Authorization header: " + (authHeader != null ? authHeader.substring(0, Math.min(authHeader.length(), 30)) + "..." : "–ù–ï–¢"));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–∫—Ç Authentication
            System.out.println("üîç TEST-AUTH: Authentication –æ–±—ä–µ–∫—Ç: " + (auth != null ? "–ï–°–¢–¨" : "–ù–ï–¢"));
            
            if (auth != null) {
                System.out.println("üîç TEST-AUTH: Auth.getName(): " + auth.getName());
                System.out.println("üîç TEST-AUTH: Auth.getPrincipal(): " + auth.getPrincipal());
                System.out.println("üîç TEST-AUTH: Auth.isAuthenticated(): " + auth.isAuthenticated());
                
                if (auth.getPrincipal() instanceof UserDetails) {
                    UserDetails userDetails = (UserDetails) auth.getPrincipal();
                    System.out.println("üîç TEST-AUTH: UserDetails.getUsername(): " + userDetails.getUsername());
                    System.out.println("üîç TEST-AUTH: UserDetails.isEnabled(): " + userDetails.isEnabled());
                    System.out.println("üîç TEST-AUTH: UserDetails.isAccountNonExpired(): " + userDetails.isAccountNonExpired());
                }
            }
            
            Map<String, Object> result = new HashMap<>();
            result.put("success", true);
            result.put("authPresent", auth != null);
            result.put("authHeaderPresent", authHeader != null);
            
            if (auth != null) {
                result.put("username", auth.getName());
                result.put("authenticated", auth.isAuthenticated());
                result.put("principalType", auth.getPrincipal().getClass().getSimpleName());
            }
            
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            System.err.println("‚ùå TEST-AUTH: –û—à–∏–±–∫–∞: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.ok(Map.of(
                "success", false,
                "error", e.getMessage()
            ));
        }
    }

    /**
     * –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –Æ–ù–ò–¢-–≠–ö–û–ù–û–ú–ò–ö–ê - –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º
     */
    @GetMapping("/advanced-unit-economics")
    public ResponseEntity<?> getAdvancedUnitEconomics(Authentication auth,
                                                     @RequestParam(value = "days", defaultValue = "30") int days) {
        try {
            User user = getUserFromAuth(auth);
            System.out.println("üí∞ Analytics: –ó–∞–ø—Ä–æ—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏ –∑–∞ " + days + " –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user.getEmail());
            
            Map<String, Object> advancedData = createAdvancedUnitEconomicsData(user, days);
            
            System.out.println("‚úÖ Analytics: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞");
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", advancedData
            ));
        } catch (Exception e) {
            System.err.println("‚ùå Analytics: –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏: " + e.getMessage());
            return ResponseEntity.status(500).body(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏: " + e.getMessage()
            ));
        }
    }

    /**
     * –§–ò–ù–ê–ù–°–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –ù–ï–î–ï–õ–Ø–ú - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª–µ–π –∏ —É–±—ã—Ç–∫–æ–≤
     */
    @GetMapping("/weekly-financial-report")
    public ResponseEntity<?> getWeeklyFinancialReport(Authentication auth,
                                                     @RequestParam(value = "days", defaultValue = "30") int days) {
        try {
            User user = getUserFromAuth(auth);
            System.out.println("üìä Analytics: –ó–∞–ø—Ä–æ—Å –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞ " + days + " –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user.getEmail());
            
            Map<String, Object> financialData = createWeeklyFinancialReportData(user, days);
            
            System.out.println("‚úÖ Analytics: –ù–µ–¥–µ–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—É—á–µ–Ω");
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", financialData
            ));
        } catch (Exception e) {
            System.err.println("‚ùå Analytics: –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: " + e.getMessage());
            return ResponseEntity.status(500).body(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: " + e.getMessage()
            ));
        }
    }

    /**
     * –£–ß–ï–¢ –ê–ö–¶–ò–ô - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∞–∫—Ü–∏—è—Ö
     */
    @GetMapping("/promotions-tracking")
    public ResponseEntity<?> getPromotionsTracking(Authentication auth,
                                                  @RequestParam(value = "days", defaultValue = "30") int days) {
        try {
            User user = getUserFromAuth(auth);
            System.out.println("üéØ Analytics: –ó–∞–ø—Ä–æ—Å —É—á–µ—Ç–∞ –∞–∫—Ü–∏–π –∑–∞ " + days + " –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user.getEmail());
            
            Map<String, Object> promotionsData = createPromotionsTrackingData(user, days);
            
            System.out.println("‚úÖ Analytics: –£—á–µ—Ç –∞–∫—Ü–∏–π –ø–æ–ª—É—á–µ–Ω");
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", promotionsData
            ));
        } catch (Exception e) {
            System.err.println("‚ùå Analytics: –û—à–∏–±–∫–∞ —É—á–µ—Ç–∞ –∞–∫—Ü–∏–π: " + e.getMessage());
            return ResponseEntity.status(500).body(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ—Ç–∞ –∞–∫—Ü–∏–π: " + e.getMessage()
            ));
        }
    }

    /**
     * –†–ö –¢–ê–ë–õ–ò–¶–ê - –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
     */
    @GetMapping("/advertising-campaigns-table")
    public ResponseEntity<?> getAdvertisingCampaignsTable(Authentication auth,
                                                          @RequestParam(value = "days", defaultValue = "30") int days) {
        try {
            User user = getUserFromAuth(auth);
            System.out.println("üì¢ Analytics: –ó–∞–ø—Ä–æ—Å –†–ö —Ç–∞–±–ª–∏—Ü—ã –∑–∞ " + days + " –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user.getEmail());
            
            Map<String, Object> advertisingData = createAdvertisingCampaignsTableData(user, days);
            
            System.out.println("‚úÖ Analytics: –†–ö —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–∞");
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", advertisingData
            ));
        } catch (Exception e) {
            System.err.println("‚ùå Analytics: –û—à–∏–±–∫–∞ –†–ö —Ç–∞–±–ª–∏—Ü—ã: " + e.getMessage());
            return ResponseEntity.status(500).body(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –†–ö —Ç–∞–±–ª–∏—Ü—ã: " + e.getMessage()
            ));
        }
    }

    /**
     * –ü–õ–ê–ù –ü–û–°–¢–ê–í–û–ö - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–æ–∫ –∏ –ø–æ—Å—Ç–∞–≤–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
     */
    @GetMapping("/supply-planning")
    public ResponseEntity<?> getSupplyPlanning(Authentication auth,
                                              @RequestParam(value = "days", defaultValue = "30") int days) {
        try {
            User user = getUserFromAuth(auth);
            System.out.println("üì¶ Analytics: –ó–∞–ø—Ä–æ—Å –ø–ª–∞–Ω–∞ –ø–æ—Å—Ç–∞–≤–æ–∫ –∑–∞ " + days + " –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user.getEmail());
            
            Map<String, Object> supplyData = createSupplyPlanningData(user, days);
            
            System.out.println("‚úÖ Analytics: –ü–ª–∞–Ω –ø–æ—Å—Ç–∞–≤–æ–∫ –ø–æ–ª—É—á–µ–Ω");
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "data", supplyData
            ));
        } catch (Exception e) {
            System.err.println("‚ùå Analytics: –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∞ –ø–æ—Å—Ç–∞–≤–æ–∫: " + e.getMessage());
            return ResponseEntity.status(500).body(Map.of(
                "success", false,
                "message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–æ—Å—Ç–∞–≤–æ–∫: " + e.getMessage()
            ));
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏ —Å –ø–æ–ª–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏
     */
    private Map<String, Object> createAdvancedUnitEconomicsData(User user, int days) {
        List<Map<String, Object>> products = new ArrayList<>();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è 10 —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏
        String[] productNames = {
            "–í–æ–¥—è–Ω–æ–π –Ω–∞—Å–æ—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π", "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–∞", "–í–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä",
            "–ú–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä", "–ì–ª—É—à–∏—Ç–µ–ª—å", "–¢–æ—Ä–º–æ–∑–Ω—ã–µ –¥–∏—Å–∫–∏", "–§–∞—Ä—ã", "–ú–∞—Å–ª–æ –º–æ—Ç–æ—Ä–Ω–æ–µ",
            "–ü—Ä–∏–≤–æ–¥–Ω–æ–π —Ä–µ–º–µ–Ω—å", "–°—Ç–æ–π–∫–∞ –ø–æ–¥–≤–µ—Å–∫–∏"
        };
        
        for (int i = 0; i < 10; i++) {
            Map<String, Object> product = new HashMap<>();
            
            // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            product.put("number", i + 1);
            product.put("wbArticle", String.format("23374%04d", 3000 + i));
            product.put("sellerArticle", String.format("881%02d", 80 + i));
            
            // –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            double costPrice = 800 + (i * 200); // –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
            double deliveryToWb = 50; // –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –í–ë
            double grossProfit = 500 + (i * 100); // –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å
            double mpPriceBefore = costPrice + grossProfit + deliveryToWb + 300; // –ú–ü —Ü–µ–Ω–∞ –î–û
            double mpDiscount = mpPriceBefore * 0.15; // –ú–ü —Å–∫–∏–¥–∫–∞ 15%
            double priceBeforeSpp = mpPriceBefore - mpDiscount; // –¶–µ–Ω–∞ –¥–æ –°–ü–ü
            double sppPercent = 10 + (i * 2); // % –°–ü–ü
            double priceAfterSpp = priceBeforeSpp * (1 - sppPercent / 100); // –¶–µ–Ω–∞ –ø–æ—Å–ª–µ –°–ü–ü
            
            // –†–∞–∑–º–µ—Ä—ã –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞
            double height = 15 + (i * 2); // —Å–º
            double width = 10 + i; // —Å–º 
            double length = 20 + (i * 3); // —Å–º
            double volumeLiters = (height * width * length) / 1000; // –ª–∏—Ç—Ä—ã
            double warehouseCoeff = 2.0; // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–ª–∞–¥–∞ 200%
            
            // –õ–æ–≥–∏—Å—Ç–∏–∫–∞
            double deliveryFirstLiter = 38;
            double deliveryPerLiter = 9.5;
            double logisticsMp = ((volumeLiters - 1) * deliveryPerLiter + deliveryFirstLiter) * warehouseCoeff;
            
            double buyoutPercent = 80 + (i * 2); // –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∫—É–ø–∞
            double logisticsWithBuyout = logisticsMp * (buyoutPercent / 100);
            double localizationIndex = 1.1 + (i * 0.05); // –∏–Ω–¥–µ–∫—Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            double finalLogistics = logisticsWithBuyout * localizationIndex;
            
            double storageMp = volumeLiters * 5; // —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞ –ª–∏—Ç—Ä
            
            // –ö–æ–º–∏—Å—Å–∏–∏
            double commissionPercent = 8 + (i * 0.5); // –∫–æ–º–∏—Å—Å–∏—è –ú–ü %
            double commissionRub = priceAfterSpp * (commissionPercent / 100); // –∫–æ–º–∏—Å—Å–∏—è –ú–ü —Ä—É–±
            double totalMp = commissionRub + finalLogistics + storageMp; // –ò–¢–û–ì–û –ú–ü
            double totalToPay = priceAfterSpp - totalMp; // –ò–¢–û–ì–û –∫ –æ–ø–ª–∞—Ç–µ
            
            double tax = totalToPay * 0.07; // –Ω–∞–ª–æ–≥ 7%
            double revenueAfterTax = totalToPay - tax; // –≤—ã—Ä—É—á–∫–∞ –ø–æ—Å–ª–µ –Ω–∞–ª–æ–≥–∞
            double finalGrossProfit = revenueAfterTax - costPrice - deliveryToWb; // –≤–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å
            
            // –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
            double markupFromFinalPrice = (finalGrossProfit / priceAfterSpp) * 100; // –Ω–∞—Ü–µ–Ω–∫–∞ –æ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Ü–µ–Ω—ã
            double finalMarginality = (finalGrossProfit / revenueAfterTax) * 100; // –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏—Ç–æ–≥–æ–≤–∞—è
            double grossProfitability = (finalGrossProfit / (costPrice + deliveryToWb)) * 100; // —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –≤–∞–ª–æ–≤–æ–π
            double roi = ((revenueAfterTax - (costPrice + deliveryToWb)) / (costPrice + deliveryToWb)) * 100; // ROI
            
            // –¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏
            double breakEvenPoint = (finalLogistics + costPrice) / (1 - (commissionPercent + 7) / 100);
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—è
            product.put("costPrice", (double) Math.round(costPrice));
            product.put("deliveryToWb", (double) Math.round(deliveryToWb));
            product.put("grossProfit", (double) Math.round(grossProfit));
            product.put("mpPriceBefore", (double) Math.round(mpPriceBefore));
            product.put("mpDiscount", (double) Math.round(mpDiscount));
            product.put("priceBeforeSpp", (double) Math.round(priceBeforeSpp));
            product.put("sppPercent", Math.round(sppPercent * 10) / 10.0);
            product.put("priceAfterSpp", (double) Math.round(priceAfterSpp));
            product.put("breakEvenPoint", (double) Math.round(breakEvenPoint));
            product.put("buyoutPercent", Math.round(buyoutPercent * 10) / 10.0);
            product.put("commissionPercent", Math.round(commissionPercent * 10) / 10.0);
            product.put("deliveryFirstLiter", (double) Math.round(deliveryFirstLiter));
            product.put("deliveryPerLiter", Math.round(deliveryPerLiter * 10) / 10.0);
            product.put("height", Math.round(height * 10) / 10.0);
            product.put("width", Math.round(width * 10) / 10.0);
            product.put("length", Math.round(length * 10) / 10.0);
            product.put("volumeLiters", Math.round(volumeLiters * 100) / 100.0);
            product.put("warehouseCoeff", Math.round(warehouseCoeff * 100) / 100.0);
            product.put("logisticsMp", (double) Math.round(logisticsMp));
            product.put("logisticsWithBuyout", (double) Math.round(logisticsWithBuyout));
            product.put("finalLogistics", (double) Math.round(finalLogistics));
            product.put("storageMp", (double) Math.round(storageMp));
            product.put("commissionRub", (double) Math.round(commissionRub));
            product.put("totalMp", (double) Math.round(totalMp));
            product.put("totalToPay", (double) Math.round(totalToPay));
            product.put("tax", (double) Math.round(tax));
            product.put("revenueAfterTax", (double) Math.round(revenueAfterTax));
            product.put("finalGrossProfit", (double) Math.round(finalGrossProfit));
            product.put("markupFromFinalPrice", Math.round(markupFromFinalPrice * 10) / 10.0);
            product.put("finalMarginality", Math.round(finalMarginality * 10) / 10.0);
            product.put("grossProfitability", Math.round(grossProfitability * 10) / 10.0);
            product.put("roi", Math.round(roi * 10) / 10.0);
            
            products.add(product);
        }
        
        // –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        Map<String, Object> summary = new HashMap<>();
        summary.put("totalProducts", products.size());
        summary.put("totalRevenue", products.stream().mapToDouble(p -> (Double) p.get("revenueAfterTax")).sum());
        summary.put("totalCosts", products.stream().mapToDouble(p -> (Double) p.get("costPrice")).sum());
        summary.put("totalProfit", products.stream().mapToDouble(p -> (Double) p.get("finalGrossProfit")).sum());
        summary.put("avgRoi", products.stream().mapToDouble(p -> (Double) p.get("roi")).average().orElse(0));
        summary.put("avgMarginality", products.stream().mapToDouble(p -> (Double) p.get("finalMarginality")).average().orElse(0));
        
        return Map.of("products", products, "summary", summary);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
     */
    private Map<String, Object> createWeeklyFinancialReportData(User user, int days) {
        List<Map<String, Object>> weeklyData = new ArrayList<>();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–µ–¥–µ–ª—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –Ω–µ–¥–µ–ª–∏
        for (int week = 1; week <= 4; week++) {
            Map<String, Object> weekData = new HashMap<>();
            
            weekData.put("week", "–ù–µ–¥–µ–ª—è " + week);
            weekData.put("date", String.format("0%d.06 - %d.06", week * 7 - 6, week * 7));
            
            int buyoutQty = 50 + (week * 20);
            double salesWb = buyoutQty * (1500 + week * 200);
            double paymentForProduct = salesWb * 0.85; // –∫ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –∑–∞ —Ç–æ–≤–∞—Ä
            double logistics = buyoutQty * 120; // –ª–æ–≥–∏—Å—Ç–∏–∫–∞
            double storage = buyoutQty * 25; // —Ö—Ä–∞–Ω–µ–Ω–∏–µ
            double acceptance = buyoutQty * 15; // –ø—Ä–∏–µ–º–∫–∞
            double fine = Math.max(0, (week - 2) * 500); // —à—Ç—Ä–∞—Ñ
            double advertising = salesWb * 0.12; // —É–¥–µ—Ä–∂–∞–Ω–∏—è/—Ä–µ–∫–ª–∞–º–∞
            double toPay = paymentForProduct - logistics - storage - acceptance - fine - advertising;
            double tax = toPay * 0.07; // –Ω–∞–ª–æ–≥
            double otherExpenses = salesWb * 0.03; // –ø—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
            double costOfGoodsSold = buyoutQty * (600 + week * 50); // —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            double netProfit = toPay - tax - otherExpenses - costOfGoodsSold;
            
            weekData.put("buyoutQty", buyoutQty);
            weekData.put("salesWb", (double) Math.round(salesWb));
            weekData.put("paymentForProduct", (double) Math.round(paymentForProduct));
            weekData.put("logistics", (double) Math.round(logistics));
            weekData.put("storage", (double) Math.round(storage));
            weekData.put("acceptance", (double) Math.round(acceptance));
            weekData.put("fine", (double) Math.round(fine));
            weekData.put("advertising", (double) Math.round(advertising));
            weekData.put("toPay", (double) Math.round(toPay));
            weekData.put("tax", (double) Math.round(tax));
            weekData.put("otherExpenses", (double) Math.round(otherExpenses));
            weekData.put("costOfGoodsSold", (double) Math.round(costOfGoodsSold));
            weekData.put("netProfit", (double) Math.round(netProfit));
            
            weeklyData.add(weekData);
        }
        
        // –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        Map<String, Object> summary = new HashMap<>();
        summary.put("totalWeeks", weeklyData.size());
        summary.put("totalSales", weeklyData.stream().mapToDouble(w -> (Double) w.get("salesWb")).sum());
        summary.put("totalToPay", weeklyData.stream().mapToDouble(w -> (Double) w.get("toPay")).sum());
        summary.put("totalNetProfit", weeklyData.stream().mapToDouble(w -> (Double) w.get("netProfit")).sum());
        summary.put("avgWeeklyProfit", weeklyData.stream().mapToDouble(w -> (Double) w.get("netProfit")).average().orElse(0));
        
        return Map.of("weeklyData", weeklyData, "summary", summary);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–µ—Ç–∞ –∞–∫—Ü–∏–π
     */
    private Map<String, Object> createPromotionsTrackingData(User user, int days) {
        List<Map<String, Object>> promotions = new ArrayList<>();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—á–µ—Ç–∞ –∞–∫—Ü–∏–π
        for (int i = 1; i <= 8; i++) {
            Map<String, Object> promotion = new HashMap<>();
            
            promotion.put("number", i);
            promotion.put("wbArticle", String.format("23374%03d", 100 + i));
            promotion.put("supplierArticle", String.format("881%02d", 80 + i));
            promotion.put("binding", i); // —Å–∫–ª–µ–π–∫–∞
            
            // ABC –∞–Ω–∞–ª–∏–∑
            String abcCategory = i <= 2 ? "A" : (i <= 5 ? "B" : "C");
            promotion.put("abcAnalysis", abcCategory);
            
            // –ü–æ–¥–≥—Ä—É–ø–ø–∞ (F - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞, D - —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞)
            String subgroup = (i % 2 == 0) ? "F" : "D";
            promotion.put("subgroup", subgroup);
            
            double grossProfit = 300 + (i * 50);
            double currentPrice = 1500 + (i * 150);
            
            // –î–µ–π—Å—Ç–≤–∏–µ
            String action = subgroup.equals("F") ? "–ì–æ—Ç–æ–≤–∏–º –∫ –∞–∫—Ü–∏–∏ (–ø–æ–¥–Ω–∏–º–∞–µ–º —Ü–µ–Ω—É)" : "–†–∞—Å–ø—Ä–æ–¥–∞–µ–º";
            promotion.put("action", action);
            
            double promotionPrice = subgroup.equals("F") ? currentPrice * 1.15 : currentPrice * 0.85;
            double promotionGrossProfit = subgroup.equals("F") ? grossProfit + 150 : grossProfit - 100;
            
            int turnover = 100 + (i * 20); // –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –≤ –¥–Ω—è—Ö
            int stockWb = 200 + (i * 50); // –æ—Å—Ç–∞—Ç–∫–∏ –í–ë
            
            promotion.put("grossProfit", (double) Math.round(grossProfit));
            promotion.put("currentPrice", (double) Math.round(currentPrice));
            promotion.put("promotionPrice", (double) Math.round(promotionPrice));
            promotion.put("promotionGrossProfit", (double) Math.round(promotionGrossProfit));
            promotion.put("turnover", turnover);
            promotion.put("stockWb", stockWb);
            
            promotions.add(promotion);
        }
        
        // –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        Map<String, Object> summary = new HashMap<>();
        summary.put("totalProducts", promotions.size());
        summary.put("preparationProducts", promotions.stream().mapToInt(p -> "F".equals(p.get("subgroup")) ? 1 : 0).sum());
        summary.put("liquidationProducts", promotions.stream().mapToInt(p -> "D".equals(p.get("subgroup")) ? 1 : 0).sum());
        summary.put("avgTurnover", promotions.stream().mapToInt(p -> (Integer) p.get("turnover")).average().orElse(0));
        
        return Map.of("promotions", promotions, "summary", summary);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –†–ö —Ç–∞–±–ª–∏—Ü—ã (—Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏)
     */
    private Map<String, Object> createAdvertisingCampaignsTableData(User user, int days) {
        List<Map<String, Object>> campaigns = new ArrayList<>();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–∫–ª–∞–º–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º
        for (int i = 1; i <= 6; i++) {
            Map<String, Object> campaign = new HashMap<>();
            
            campaign.put("number", i);
            campaign.put("wbArticle", String.format("23374%03d", 100 + i));
            campaign.put("supplierArticle", String.format("881%02d", 80 + i));
            campaign.put("binding", i); // —Å–∫–ª–µ–π–∫–∞
            campaign.put("indicator", "–ê–≤—Ç–æ –†–∞—Å—Ö–æ–¥—ã –†–ö");
            
            // –†–∞—Å—Ö–æ–¥—ã –ø–æ –Ω–µ–¥–µ–ª—è–º (—Ä—É–±–ª–∏)
            campaign.put("week1", (double) Math.round(Math.random() * 5000)); // 05.05-11.05
            campaign.put("week2", (double) Math.round(Math.random() * 5000)); // 12.05-18.05
            campaign.put("week3", (double) Math.round(Math.random() * 5000)); // 19.05-25.05
            campaign.put("week4", (double) Math.round(Math.random() * 5000)); // 26.05-01.06
            campaign.put("week5", (double) Math.round(Math.random() * 5000)); // 02.06-08.06
            
            // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã
            double total = (Double) campaign.get("week1") + (Double) campaign.get("week2") + 
                          (Double) campaign.get("week3") + (Double) campaign.get("week4") + 
                          (Double) campaign.get("week5");
            campaign.put("total", (double) Math.round(total));
            
            campaigns.add(campaign);
        }
        
        // –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        Map<String, Object> summary = new HashMap<>();
        summary.put("totalCampaigns", campaigns.size());
        summary.put("totalSpent", campaigns.stream().mapToDouble(c -> (Double) c.get("total")).sum());
        summary.put("avgWeeklySpent", campaigns.stream().mapToDouble(c -> (Double) c.get("total")).average().orElse(0) / 5);
        summary.put("maxSpent", campaigns.stream().mapToDouble(c -> (Double) c.get("total")).max().orElse(0));
        
        return Map.of("campaigns", campaigns, "summary", summary);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞ –ø–æ—Å—Ç–∞–≤–æ–∫
     */
    private Map<String, Object> createSupplyPlanningData(User user, int days) {
        List<Map<String, Object>> supplies = new ArrayList<>();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–ª–∞–Ω—É –ø–æ—Å—Ç–∞–≤–æ–∫
        for (int i = 1; i <= 8; i++) {
            Map<String, Object> supply = new HashMap<>();
            
            supply.put("number", i);
            supply.put("wbArticle", String.format("32734%03d", 390 + i));
            supply.put("supplierArticle", String.format("883%02d", i));
            
            int qtyInTransit = (i % 3 == 0) ? 0 : 50 + (i * 10); // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—É—Ç–∏
            int qtyOnSale = 150 + (i * 20); // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ
            double totalStock = (qtyInTransit + qtyOnSale) * (900 + i * 100); // –æ–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –≤ —Ä—É–±–ª—è—Ö
            double avgOrdersPerDay = 0.1 + (i * 0.1); // —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å
            int turnoverDays = (int) (qtyOnSale / (avgOrdersPerDay * 30)); // –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –≤ –¥–Ω—è—Ö
            int coveragePlan30 = (int) (avgOrdersPerDay * 30); // –ø–ª–∞–Ω –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–∞ 30 –¥–Ω–µ–π
            int demandFor30Days = coveragePlan30 - qtyOnSale; // –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –Ω–∞ 30 –¥–Ω–µ–π
            double seasonalityCoeff = 1.0 + (i * 0.2); // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
            int demandWithSeasonality = (int) (demandFor30Days * seasonalityCoeff); // –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
            
            supply.put("qtyInTransit", qtyInTransit);
            supply.put("qtyOnSale", qtyOnSale);
            supply.put("totalStock", (double) Math.round(totalStock));
            supply.put("avgOrdersPerDay", Math.round(avgOrdersPerDay * 10) / 10.0);
            supply.put("turnoverDays", turnoverDays);
            supply.put("coveragePlan30", coveragePlan30);
            supply.put("demandFor30Days", demandFor30Days);
            supply.put("seasonalityCoeff", Math.round(seasonalityCoeff * 10) / 10.0);
            supply.put("demandWithSeasonality", demandWithSeasonality);
            
            supplies.add(supply);
        }
        
        // –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        Map<String, Object> summary = new HashMap<>();
        summary.put("totalProducts", supplies.size());
        summary.put("totalInTransit", supplies.stream().mapToInt(s -> (Integer) s.get("qtyInTransit")).sum());
        summary.put("totalOnSale", supplies.stream().mapToInt(s -> (Integer) s.get("qtyOnSale")).sum());
        summary.put("totalStockValue", supplies.stream().mapToDouble(s -> (Double) s.get("totalStock")).sum());
        summary.put("avgTurnover", supplies.stream().mapToInt(s -> (Integer) s.get("turnoverDays")).average().orElse(0));
        summary.put("totalDemand", supplies.stream().mapToInt(s -> (Integer) s.get("demandWithSeasonality")).sum());
        
        return Map.of("supplies", supplies, "summary", summary);
    }
} 
 
 